[{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/Python_troubleshooting.html","id":"about-the-message-would-you-like-to-create-a-default-python-environment-for-the-reticulate-package-yesnocancel-reticulate-1-41-0","dir":"Articles","previous_headings":"","what":"1. About the message: “Would you like to create a default Python environment for the reticulate package? (Yes/no/cancel)” (reticulate < 1.41.0)","title":"Python troubleshooting","text":"explained home page, pop-prompt reticulate package. Choosing ‘Yes’ let reticulate install Python virtual environment. entirely optional. Simply choose/click /Cancel ignore. reticulate documentation explains: installing Python packages ’s best practice isolate >within Python environment (named Python installation >exists specific project purpose). provides >measure isolation, updating Python package one >project doesn’t impact projects. risk package >incompatibilities significantly higher Python packages >R packages, unlike CRAN, PyPI >enforce, even check, current versions packages >currently available compatible. Note VertexWiseR install stable specific version Python package needs work properly. users believe using Miniconda/Python installation VertexWiseR need update , may stable install specific Miniconda/Python environment path choice (allowed VWRfirstrun()), use reticulate isolated virtual environment. details using virtual environments can found reticulate documentation.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/Python_troubleshooting.html","id":"how-to-make-vwrfirstrun-ignore-the-systems-python-environment-when-starting-a-fresh-installation","dir":"Articles","previous_headings":"","what":"2. How to make VWRfirstrun() ignore the system’s Python environment when starting a fresh installation","title":"Python troubleshooting","text":"VertexWiseR automatically select run Python installation finds via reticulate, users may want prevent run VertexWiseR new Python installation . section explains make VWRfirstrun() ignore previous Python/Miniconda installation order install new one (affect system’s Python libraries). Firstly, Python installation path may already preloaded global environment, via files .Renviron, .Rprofile, .bashrc etc. case edited remove path previous Python installation, avoid reticulate using paths automatically. Secondly, Python paths specified global environment, reticulate search Python installation default locations. can avoided method . make VWRfirstrun() ignore previous Python installation, users can set RETICULATE_PYTHON variable NA (new R session clean workspace) running function: lines, reticulate fail load Python respond way Python previously installed . Therefore, VWRfirstrun() prompt users install new Python environment. , VWRfirstrun() use newly installed Python environment default users need .","code":"Sys.setenv(RETICULATE_PYTHON=NA) VWRfirstrun()"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/Python_troubleshooting.html","id":"how-to-make-vwrfirstrun-use-a-specific-python-installation","dir":"Articles","previous_headings":"","what":"3. How to make VWRfirstrun() use a specific Python installation","title":"Python troubleshooting","text":"section explains users can choose different Python one automatically detected wish , instead installing new one.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/Python_troubleshooting.html","id":"a--for-a-new-fresh-vertexwiser-set-up","dir":"Articles","previous_headings":"3. How to make VWRfirstrun() use a specific Python installation","what":"a. For a new, fresh VertexWiseR set-up","title":"Python troubleshooting","text":"Reticulate allows users predefine Python environment used entering Python’s directory path following functions: functions must executed VWRfirstrun() run R session. latter function automatically assume version Python correctly installed ask packages downloaded/installed missing. check Python installation used, users can run: print information path Python environment reticulate currently using. still path specified functions listed , users try restarting R /clearing R workspace first.","code":"reticulate::use_python(python) reticulate::use_virtualenv(virtualenv) reticulate::use_condaenv(condaenv) reticulate::use_miniconda(condaenv) reticulate::py_config()"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/Python_troubleshooting.html","id":"b--if-the-vwrfirstrun-installations-were-already-done-before","dir":"Articles","previous_headings":"3. How to make VWRfirstrun() use a specific Python installation","what":"b. If the VWRfirstrun() installations were already done before","title":"Python troubleshooting","text":"Python Miniconda already installed using VWRfirstrun(), users able modify Python path manner. path user-selected default custom installations saved order conveniently access later. Every time VWRfirstrun() run, read use saved paths. also depends whether user created default ephemeral environment chose manual Python/Miniconda installation. user installed Miniconda Python environment classic way paths installations saved inside .Renviron file, standard path generated via: Within .Renviron file, environment variables written manner: swap another Python environment, users may choose edit .Renviron directly, replacing paths Python installation like VertexWiseR use instead. RETICULATE_MINICONDA_PATH may also safely removed non-conda Python library used. Alternatively, users may choose completely remove .Renviron redefine path described section 3a. user created ephemeral virtual environment case users chose virtual environment installation proposed VWRfirstrun(), calls reticulate::py_require(). path environment accessible command line: stop using environment, users may choose clear cache completely: wish get rid previous virtual environment, users modify /remove VIRTUAL_ENV variable stored .Renviron file, standard path generated via: variable automatically removed virtual environment can longer found cache, automatically used VWRfirstrun() installation speed process, still exists. VIRTUAL_ENV variable must rewritten new ephemeral environment generated py_require() use latter.","code":"tools::R_user_dir(package='VertexWiseR') RETICULATE_MINICONDA_PATH=\"C:/path_to_miniconda/\" RETICULATE_PYTHON_FALLBACK=\"C:/path_to_miniconda/\" RETICULATE_PYTHON=\"C:/path_to_miniconda/python.exe\" tools::R_user_dir(\"reticulate\", \"cache\") unlink(tools::R_user_dir(\"reticulate\", \"cache\")) tools::R_user_dir(package='VertexWiseR')"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_Example_1.html","id":"installing-vertexwiser-and-checking-for-requirements","dir":"Articles","previous_headings":"","what":"Installing VertexWiseR and checking for requirements","title":"Example analyses with VertexWiseR - Example 1","text":"following code installs package makes sure requirements, prompting user install dependencies, order allow analyses work. VWRfirstrun() checks system requiremements specific functions, gives opportunity download install .","code":"install.packages(\"VertexWiseR\") library(VertexWiseR) VWRfirstrun()"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_Example_1.html","id":"example-analysis-1-linear-model-of-age-and-cortical-thickness-and-meta-analytic-decoding","dir":"Articles","previous_headings":"","what":"Example analysis 1: linear model of age and cortical thickness, and meta-analytic decoding","title":"Example analyses with VertexWiseR - Example 1","text":"analysis use surface data already extracted R preprocessed subjects directory, make available need preprocess sample . obtain , extracted cortical thickness (CT) data FreeSurfer preprocessing directory SPRENG dataset (Spreng et al. 2022). demo data (218 MB) required run package demos can downloaded package’s github repository following function: command line originally used extract surface: load demo thickness matrix: smooth surface data: load demo behavioural data (participants site 1, SPRENG_behdata_site1.csv): run vertex-wise model analysis random field theory-based cluster correction, testing effect age, controlling sex, CT: run vertex-wise model analysis threshold-free cluster enhancement-based cluster correction, testing effect age, controlling sex, CT; 1000 permutations: plot results models inflated fsaverage5 surface:  run meta-analytic decoding significant negative clusters (neurosynth dataset needs installed VWRfirstrun() allows):","code":"#This will save the demo_data directory in a temporary directory (tempdir(), but you can change it to your own path) demodata=VertexWiseR:::dl_demo(path=tempdir(), quiet=TRUE) #SURFvextract(sdirpath = SUBJECTS_DIR, filename = \"SPRENG_CTv\", template='fsaverage5', measure = 'thickness', subj_ID = T) SPRENG_CTv = readRDS(file=paste0(demodata,\"/SPRENG_CTv_site1.rds\")) SPRENG_CTv_smoothed = smooth_surf(SPRENG_CTv, 10) dat_beh=readRDS(paste0(demodata,'/SPRENG_behdata_site1.rds')) model1_RFT=RFT_vertex_analysis(model = dat_beh[,c(\"sex\",\"age\")],    contrast = dat_beh[,\"age\"], surf_data = SPRENG_CTv_smoothed, p = 0.05) model1_RFT$cluster_level_results ## $`Positive contrast` ##   clusid nverts     P     X    Y   Z tstat          region ## 1      1    142 0.015 -22.8 11.5 -42  6.45 lh-temporalpole ##  ## $`Negative contrast` ##   clusid nverts      P   X     Y     Z  tstat              region ## 1      1   8039 <0.001  47   4.0 -16.6 -12.64 rh-superiortemporal ## 2      2   7660 <0.001 -34 -25.7  16.2 -14.23           lh-insula model1_TFCE=TFCE_vertex_analysis(model= dat_beh[,c(\"sex\",\"age\")],                                   contrast = dat_beh[,\"age\"],                                  surf_data=SPRENG_CTv_smoothed,                                  nperm=1000,                                   nthread=4)   TFCEoutput = TFCE_threshold(model1_TFCE, p=0.05) TFCEoutput$cluster_level_results ## $`Positive contrast` ## [1] \"No significant clusters\" ##  ## $`Negative contrasts` ##   clusid nverts      P   X     Y     Z tstat              region ## 1      1   8098 <0.001  47   4.0 -16.6 12.64 rh-superiortemporal ## 2      2   7617 <0.001 -34 -25.7  16.2 14.23           lh-insula tmaps = rbind(model1_RFT$thresholded_tstat_map, TFCEoutput$thresholded_tstat_map) plot_surf(surf_data = tmaps,            filename ='SPRENG_tstatmaps.png',            size=c(1400,582),           surface = 'inflated',            title=c(\"RFT-corrected\\nclusters\", \"TFCE-corrected\\nclusters\"),           cmap='RdBu_r',           show.plot.window=FALSE) surf_decoding=decode_surf_data(TFCEoutput$thresholded_tstat_map, contrast=\"negative\") head(surf_decoding) ##        keyword     r ## 538  retrieval 0.065 ## 202   episodic 0.059 ## 348     memory 0.053 ## 198 engagement 0.048 ## 332 linguistic 0.048 ## 439      older 0.047"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_Example_2.html","id":"example-2-mixed-effect-model-of-intervention-related-changes-on-hippocampal-thickness","dir":"Articles","previous_headings":"","what":"Example 2: Mixed effect model of intervention-related changes on hippocampal thickness","title":"Example analyses with VertexWiseR - Example 2","text":"Note: --date demo. version published Imaging Neuroscience (2024) 2: 1–14 longer applies since v1.3.0 fixes made TFCE_vertex_analysis_mixed() function (see updates page details). analysis use surface data already extracted R preprocessed subjects directory, make available need preprocess sample . obtain , extracted cortical thickness (CT) data Hippunfold preprocessing directory Fink dataset (Fink et al. 2021). demo data (218 MB) required run package demos can downloaded package’s github repository following function: command line originally used extract surface: load hippocampal thickness matrix: smooth surface data: load behavioural data (FINK_behdata_ses13.csv, contains two rows per participant, scanning sessions 1 3). , interested interaction session number (time) group. run vertex-wise mixed model analysis random field theory-based cluster correction, testing effect session, group, session * group interaction, hippocampal thickness, subject ID random variable: run vertex-wise mixed model analysis threshold-free cluster enhancement-based cluster correction, 1000 permutations, testing effect session, group, session * group interaction, hippocampal thickness, subject ID random variable: plot significant clusters models CITI168 hippocampal template surface:","code":"#This will save the demo_data directory in a temporary directory (tempdir(), but you can change it to your own path) demodata=VertexWiseR:::dl_demo(path=tempdir(), quiet=TRUE) #HIPvextract(sdirpath = hippunfold_SUBJECTS_DIR, filename = \"FINK_Tv\", measure = \"thickness\", subj_ID = T) FINK_Tv_ses13 = readRDS(file=paste0(demodata,\"/FINK_Tv_ses13.rds\")) FINK_Tv_smoothed_ses13 = smooth_surf(FINK_Tv_ses13, 5) dat_beh_ses13 = readRDS(paste0(demodata,\"/FINK_behdata_ses13.rds\")) model2_RFT=RFT_vertex_analysis(   model = dat_beh_ses13[,c(\"session\",\"group\",\"session_x_group\")],   contrast = dat_beh_ses13[,\"session_x_group\"],   surf_data=FINK_Tv_smoothed_ses13,   random=dat_beh_ses13[,\"participant_id\"], p=0.05) model2_RFT$cluster_level_results ## $`Positive contrast` ##   clusid nverts     P     X    Y   Z tstat      region ## 1      1    974 0.041 -13.3 27.5 1.3  4.14 L Subiculum ##  ## $`Negative contrast` ## [1] \"No significant clusters\" set.seed(123) model2_TFCE=TFCE_vertex_analysis_mixed(   model = dat_beh_ses13[,c(\"session\",\"group\",\"session_x_group\")],    contrast = dat_beh_ses13[,\"session_x_group\"],    surf_data= FINK_Tv_smoothed_ses13,    nperm=1000,    random = dat_beh_ses13[,\"participant_id\"],    perm_type=\"within_between\",    nthread=1)  TFCEoutput = TFCE_threshold(model2_TFCE, p=0.05) TFCEoutput$cluster_level_results ## $`Positive contrast` ##   clusid nverts     P     X    Y   Z tstat      region ## 1      1     73 0.033 -27.5 27.5 1.3  4.14 L Subiculum ##  ## $`Negative contrasts` ## [1] \"No significant clusters\" tmaps = rbind(model2_RFT$thresholded_tstat_map, TFCEoutput$thresholded_tstat_map) plot_surf(surf_data = tmaps,            filename = 'FINK_tstatmaps.png',           title=c('RFT-corrected\\nclusters','TFCE-corrected\\nclusters'),            cmap='Reds',           show.plot.window=FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_Example_2.html","id":"example-2-follow-up-plotting-and-post-hoc-analyses-of-hippocampal-clusters-across-regression-models","dir":"Articles","previous_headings":"","what":"Example 2 follow-up: plotting and post-hoc analyses of hippocampal clusters across regression models","title":"Example analyses with VertexWiseR - Example 2","text":"code used R (v.4.3.3) plot cluster-wise values RFT TFCE corrected analyses validate additional mixed linear models. produce figure displaying thickness hippocampal clusters relation group session variables, RFT TFCE models, demonstrating steeper curve toward group 2:  additional validation results, significant clusters extracted regions--interests fitted linear mixed effects model using another R package— lmerTest (Kuznetsova, Brockhoff, Christensen 2017). Linear mixed effect testing effect session, group, session * group interaction positive RFT clusters’ average thickness value Linear mixed effect testing effect session, group, session * group interaction positive TFCE clusters’ average thickness value","code":"#We divide the cluster values by their sum to get the average thickness per vertex dat_beh_ses13$clustCTTFCE=(FINK_Tv_smoothed_ses13 %*% TFCEoutput$pos_mask)/sum(TFCEoutput$pos_mask>0) dat_beh_ses13$clustRFT=(FINK_Tv_smoothed_ses13 %*% model2_RFT$pos_mask)/sum(model2_RFT$pos_mask>0)  library(ggplot2) library(ggbeeswarm) library(cowplot)  a=ggplot(data=dat_beh_ses13,aes(y=clustCTTFCE,x=as.factor(session), color=as.factor(group)))+   geom_quasirandom(dodge.width=0.5)+   geom_line(aes(group=participant_id), alpha=0.2)+   geom_smooth(aes(group=group), method=\"lm\")+   labs(y=\"Mean thickness (mm)\", x=\"session\", color=\"group\")+   guides(colour = \"none\")+   ggtitle(\"Positive cluster\\n (TFCE-corrected)\")+   ylim(1.1, 1.55)    b=ggplot(data=dat_beh_ses13,aes(y=clustRFT,x=as.factor(session), color=as.factor(group)))+   geom_quasirandom(dodge.width=0.5)+   geom_line(aes(group=participant_id), alpha=0.2)+   geom_smooth(aes(group=group), method=\"lm\")+   labs(y=\"Mean thickness (mm)\", x=\"session\", color=\"group\")+   ggtitle(\"Positive cluster\\n(RFT-corrected)\")+    scale_color_discrete(name=\"Group\",labels=c(\"group 1\", \"group 2\"))+   ylim(1.1, 1.55)  png(filename=\"traj.png\", res=250, width=1400,height=604) plots=plot_grid(a,b, nrow=1,rel_widths=c(0.3,0.40)) print(plots) dev.off() library(lmerTest) lme.RFT=lmer(clustRFT~session+group+session*group+(1|participant_id),data =dat_beh_ses13 ) summary(lme.RFT) ## Linear mixed model fit by REML. t-tests use Satterthwaite's method [ ## lmerModLmerTest] ## Formula: clustRFT ~ session + group + session * group + (1 | participant_id) ##    Data: dat_beh_ses13 ##  ## REML criterion at convergence: -317.1 ##  ## Scaled residuals:  ##      Min       1Q   Median       3Q      Max  ## -2.69862 -0.43221 -0.04002  0.42291  2.57082  ##  ## Random effects: ##  Groups         Name        Variance Std.Dev. ##  participant_id (Intercept) 0.004837 0.06955  ##  Residual                   0.000236 0.01536  ## Number of obs: 96, groups:  participant_id, 48 ##  ## Fixed effects: ##                Estimate Std. Error        df t value Pr(>|t|)     ## (Intercept)    1.326760   0.010717 54.685962 123.801  < 2e-16 *** ## session       -0.003450   0.001580 46.000000  -2.183   0.0342 *   ## group         -0.006877   0.010717 54.685962  -0.642   0.5237     ## session:group  0.007645   0.001580 46.000000   4.837 1.51e-05 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Correlation of Fixed Effects: ##             (Intr) sessin group  ## session     -0.295               ## group       -0.125  0.037        ## session:grp  0.037 -0.125 -0.295 lme.posTFCE=lmer(clustCTTFCE~session+group+session*group+(1|participant_id),data =dat_beh_ses13 ) summary(lme.posTFCE) ## Linear mixed model fit by REML. t-tests use Satterthwaite's method [ ## lmerModLmerTest] ## Formula: clustCTTFCE ~ session + group + session * group + (1 | participant_id) ##    Data: dat_beh_ses13 ##  ## REML criterion at convergence: -272.9 ##  ## Scaled residuals:  ##      Min       1Q   Median       3Q      Max  ## -1.50112 -0.45415 -0.05631  0.49916  1.71410  ##  ## Random effects: ##  Groups         Name        Variance  Std.Dev. ##  participant_id (Intercept) 0.0048047 0.06932  ##  Residual                   0.0005989 0.02447  ## Number of obs: 96, groups:  participant_id, 48 ##  ## Fixed effects: ##                Estimate Std. Error        df t value Pr(>|t|)     ## (Intercept)    1.134943   0.011549 66.462361  98.275  < 2e-16 *** ## session       -0.003589   0.002517 46.000000  -1.426 0.160692     ## group         -0.009920   0.011549 66.462361  -0.859 0.393452     ## session:group  0.010234   0.002517 46.000000   4.065 0.000186 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Correlation of Fixed Effects: ##             (Intr) sessin group  ## session     -0.436               ## group       -0.125  0.054        ## session:grp  0.054 -0.125 -0.436"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_plot_overlay.html","id":"transparent-thresholding","dir":"Articles","previous_headings":"","what":"Transparent thresholding","title":"Overlaying plots and transparent thresholding","text":"article presents plot_overlay_surf() function can used overlay plots similar produced surf_plot() VertexWiseR. show can use function apply “transparent thresholding”, consists reporting spatial neuroimaging results lower, non-significant subthreshold, contextualise significant findings improve broader interpretation across studies (Taylor et al. 2025). demo data (218 MB) required run package demos can downloaded package’s github repository following function:","code":"#This will save the demo_data directory in a temporary directory (tempdir(), but you can change it to your own path) demodata=VertexWiseR:::dl_demo(path=tempdir(), quiet=TRUE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_plot_overlay.html","id":"running-a-vertex-wise-linear-model","dir":"Articles","previous_headings":"","what":"Running a vertex-wise linear model","title":"Overlaying plots and transparent thresholding","text":"example, use Spreng dataset cortical thickness behavioural data Example 1 home example , selecting young adults: test effect sex cortical thickness sample: According results, since females coded 0 males 1, regions colored red thicker males.","code":"SPRENG_CTv = readRDS(file=paste0(demodata,\"/SPRENG_CTv_site1.rds\")) dat_beh = readRDS(paste0(demodata,'/SPRENG_behdata_site1.rds')) #only young adults SPRENG_CTv = SPRENG_CTv[dat_beh$agegroup=='Y',] dat_beh = dat_beh[dat_beh$agegroup=='Y',] #smoothing at 10 FMHW SPRENG_CTv_smoothed = smooth_surf(SPRENG_CTv, 10, VWR_check = T) #preparing model data predictors=dat_beh[,c(\"site\",\"age\",\"sex\")] #running the model results=RFT_vertex_analysis(model=predictors,                              contrast=predictors$sex,                              surf_data = SPRENG_CTv_smoothed,                             p = 0.05                              ) results$cluster_level_results ## $`Positive contrast` ##   clusid nverts      P     X     Y     Z tstat              region ## 1      1    301 <0.001 -40.7 -13.0  16.5  5.06      lh-postcentral ## 2      2    181  0.002  56.3  12.1 -10.1  4.43 rh-superiortemporal ## 3      3    150  0.003  21.9 -51.6  -1.2  4.41          rh-lingual ##  ## $`Negative contrast` ## [1] \"No significant clusters\""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_plot_overlay.html","id":"plotting-significant-and-subthreshold-outcome","dir":"Articles","previous_headings":"","what":"Plotting significant and subthreshold outcome","title":"Overlaying plots and transparent thresholding","text":"RFT_vertex_analysis() TFCE_threshold() return thresholded unthresholded t-maps, can plotted individually follows. Unthresholded t-map:  Thresholded (significant) t-map:","code":"plot_surf(surf_data = results$tstat_map,           filename = \"sexdiff_nothresh.png\",           size=c(1400,291),           show.plot.window=FALSE) plot_surf(surf_data = results$thresholded_tstat_map,           filename = \"sexdiff_thresh.png\",           size=c(1400,291),           show.plot.window=FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_plot_overlay.html","id":"overlaying-plots-together","dir":"Articles","previous_headings":"","what":"Overlaying plots together","title":"Overlaying plots and transparent thresholding","text":"apply transparency thresholding, letting information subthreshold effects present plot, one may want “merge” maps together. plot_overlay() function allow plot overlay surface (surf_data_2) top background (surf_data_1). work context, plot thresholded (significant) t-stat map top unthresholded t-stat map, can automatically taken ‘results’ variable saved RFT_vertex_analysis() model. reduce alpha opacity background surface highlight surface top:  default, color bars plotted either can set FALSE (removed), done faded background colours . function also give freedom two separate color maps, order highlight significant t-values even :  similar procedure can used one wants range values independent (default limits==‘’ option provided):","code":"plot_overlay_surf(model_output=results,                   #To specify maps manually:                   #surf_data_1=results$tstat_map,                   #surf_data_2=results$thresholded_tstat_map,                    cmap_1='RdBu_r', cmap_2='RdBu_r',                   colorbar_1=FALSE, colorbar_2=TRUE,                   alpha_1=0.4, alpha_2=1,                   overlay_boundaries=TRUE,                   limits_2='same',                   filename='overlay_plot.png',                   size=c(1400,291),                    title=\"Significant effect\\nof sex\",                   show.plot.window=FALSE) plot_overlay_surf(model_output=results,                    cmap_1='RdBu_r', cmap_2='Reds',                   alpha_1=1, alpha_2=1,                   limits_2='same',                   filename='overlay_plot_twocmaps.png',                   size=c(1400,291),                    title=\"Significant effect\\nof sex\",                   show.plot.window=FALSE) plot_overlay_surf(model_output=results,                    cmap_1='RdBu_r', cmap_2='hot_r',                   alpha_1=1, alpha_2=1,                   filename='overlay_plot_twolimits.png',                   size=c(1400,291),                   title=\"Significant effect\\nof sex\",                   show.plot.window=FALSE)"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_surface_extraction.html","id":"extracting-cortical-surface-data-from-freesurfer","dir":"Articles","previous_headings":"","what":"Extracting cortical surface data: from FreeSurfer","title":"Extracting surface data in VertexWiseR","text":"SURFvextract() extracts cortical surface data preprocessed FreeSurfer subjects directory (Fischl 2012). function makes use internal FreeSurfer functions resample every participant’s individual surface fsaverage5 fsaverage6. Therefore, requires FreeSurfer installed set environment R run automatically run . demonstration, provide subsample 2 participants SPRENG dataset (Spreng et al. 2022), preprocessing surface data using FreeSurfer’s default recon-pipeline. Certain files needed (volumes, surfaces, label files) removed minimise subsample’s size. give following code example: sdirpath: Path preprocessed subjects directory (used define SUBJECTS_DIR variable automatically) filename: Name saved .rds output (can include specific path ) template: surface template space extract data, can ‘fsaverage5’ (default) ‘fsaverage6’ measure: name surface-based measure interest computed FreeSurfer. includes cortical thickness (‘thickness’), surface curvature (‘curv’), depth/height vertex (‘sulc’), surface area (‘area’), ‘volume’ (freesurfer 7.4.1 later). Default ‘thickness’. subj_ID Whether obtain list object containing subject ID data matrix instead just matrix (TRUE FALSE) example surface matrix object, extracted FreeSurfer preprocessing site 1 participants: dim(SPRENG_CTv) shows matrix object contains surface values 238 participants, 20484 thickness values correspond vertices fsaverage5, left--right hemispheres. subj_ID argument set TRUE, object returned matrix list containing matrix array listing subject IDs directory. example: * SPRENG_CTv[[1]] list subject IDs * SPRENG_CTv[[2]] matrix object","code":"SPRENG_CTv = SURFvextract(   sdirpath = paste0(demodata,'/spreng_surf_data_freesurfer'),    filename = \"SPRENG_CTv.rds\",   template='fsaverage5',   measure = 'thickness',   subj_ID = FALSE) SPRENG_CTv = readRDS(   file = paste0(demodata,\"/SPRENG_CTv_site1.rds\")) dim(SPRENG_CTv) ## [1]   238 20484"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_surface_extraction.html","id":"extracting-cortical-surface-data-from-hcp-fmriprep-or-xcp-d","dir":"Articles","previous_headings":"","what":"Extracting cortical surface data: from HCP, fMRIprep or XCP-D","title":"Extracting surface data in VertexWiseR","text":"FSLRvextract() extracts cortical data FSLR32k surface space Human Connectome Project (HCP) (Van Essen et al. 2013), fMRIprep (Esteban et al. 2019) preprocessing output directories, well XCP-D (Mehta et al. 2024) postprocessing output directories . FSLRvextract() requires HCP workbench installed, uses ciftiTools R package read .dscalar.nii files. demonstration, provide subsample 2 participants SPRENG dataset (Spreng et al. 2022), preprocessing surface data using fMRIprep. latter outputs fslr32k surface data using “–cifti-output” option (Esteban et al. 2019). anatomical files removed dscalar.nii associated json files preserved, minimise size. FSLRvextract() gets data .dscalar.nii files associated specified measure (e.g. thickness, curv), can extract follows (specify connectome workbench path): sdirpath: Path preprocessed subjects directory wb_path: Path HCP workbench directory filename: Name saved .rds output (can include specific path ) dscaler: Suffix dscaler surface files. files named differently depending preprocessing pipeline, user needs specify dataset. subj_ID Whether obtain list object containing subject ID data matrix instead just matrix (TRUE FALSE). Default TRUE. silent: Whether silence messages process (TRUE FALSE). Default FALSE. Accordingly, dat_fslr32k matrix contain 2 rows (2 participants) 64,984 columns (subject’s cortical thickness values every vertex fslr32k surface). Additionally, DTSERIESvextract() function can used individual CIFTI dtseries.nii typically outputted space fmriprep pipeline, get one subject’s surface data across N time points.","code":"dat_fslr32k=FSLRvextract(   sdirpath=paste0(demodata,\"/spreng_surf_data/\"),   wb_path=\"path/to/workbench\",   filename=\"dat_fslr32k.rds\",   dscaler=\"_space-fsLR_den-91k_thickness.dscalar.nii\",   subj_ID = FALSE,   silent=FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_surface_extraction.html","id":"extracting-cortical-surface-data-from-cat12","dir":"Articles","previous_headings":"","what":"Extracting cortical surface data: from CAT12","title":"Extracting surface data in VertexWiseR","text":"CAT12vextract() implemented version 1.2.0 can extract surface preprocessed CAT12 (Gaser et al. 2024) surface based morphometry pipeline. function requires reticulate (Ushey, Allaire, Tang 2023) run. demonstration, provide subsample 2 participants SPRENG dataset (Spreng et al. 2022), preprocessing surface data using CAT12’s SBM pipeline (segmentation resampling without smoothing), extracting different possible surface measures. 32k mesh .gii .dat files kept. CAT12vextract() extracts surface data resampled 32k meshes (without smoothing) can used example: sdirpath: Path preprocessed subjects directory (used define SUBJECTS_DIR variable automatically). recommend directory follows BIDS structure accuracy. filename: Name saved .rds output (can include specific path ) measure: name surface-based measure interest computed CAT12. includes ‘thickness’, ‘depth’, ‘fractaldimension’, ‘gyrification’, ‘toroGI20mm’. subj_ID Whether obtain list object containing subject ID data matrix instead just matrix (TRUE FALSE) Accordingly, matrix contained 2 rows (2 participants) 64,984 columns (subject’s cortical thickness values every vertex 32k mesh):","code":"CATsurf=CAT12vextract(   sdirpath=paste0(demodata,\"/SPRENG_CAT12_subsample\"),   filename='thickness.rds',    measure='thickness',    subj_ID = TRUE,   silent = FALSE) #The surface object contains the surface matrix and the list of subjects ID (and session number if applicable) names(CATsurf) ## [1] \"sub_list\" \"surf_obj\" #The surface matrix dimensions: dim(CATsurf$surf_obj) ## [1]     2 64984"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/articles/VertexWiseR_surface_extraction.html","id":"extracting-hippocampal-surface-data-from-hippunfold","dir":"Articles","previous_headings":"","what":"Extracting hippocampal surface data: from HippUnfold","title":"Extracting surface data in VertexWiseR","text":"HIPvextract() extracts cortical data CITI168 surface space HippUnfold preprocessing pipeline (DeKraker et al. 2023). opposed two functions, HIPvextract() require system requirement. demonstration, provide subsample 2 participants Fink dataset (Fink et al. 2021), preprocessing surface data using HippUnfold, keeping output .gii files. extract collate data two participants, HIPvextract() can run follows: sdirpath: Path preprocessed subjects directory filename: Name saved .rds output (can include specific path ) measure: name surface-based measure interest computed HippUnfold. includes ‘thickness’,‘curvature’,‘gyrification’ ‘surfarea’. Default ‘thickness’ subj_ID: Whether obtain list object containing subject ID data matrix instead just matrix (TRUE FALSE). Default TRUE. Note subjects directories multiple sessions, matrix object contain N rows per participant per session. matrix 6 rows 2 particiants 3 sessions ; 14,524 columns (hippocampal thickness values every vertex CITI168 surface).","code":"hipp_surf=HIPvextract(sdirpath=paste0(demodata,                                       \"/fink_surf_data\"),             filename=\"hippocampal_surf.rds\",             measure=\"thickness\",             subj_ID = TRUE) hipp_surf[[1]] ## [1] \"sub-season101_ses-1\" \"sub-season101_ses-2\" \"sub-season101_ses-3\" ## [4] \"sub-season102_ses-1\" \"sub-season102_ses-2\" \"sub-season102_ses-3\" dim(hipp_surf[[2]]) ## [1]     6 14524"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Junhong Yu. Author. Charly Billaud. Author, maintainer.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Billaud CHA, Yu J (2024). “VertexWiseR: package simplified vertex-wise analyses whole-brain hippocampal surfaces R.” Imaging Neuroscience, 2, 1-14. doi:10.1162/imag_a_00372.","code":"@Article{,   title = {VertexWiseR: A package for simplified vertex-wise analyses of whole-brain and hippocampal surfaces in R},   author = {Charly Hugo Alexandre Billaud and Junhong Yu},   journal = {Imaging Neuroscience},   year = {2024},   volume = {2},   pages = {1-14},   doi = {10.1162/imag_a_00372}, }"},{"path":[]},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"setting-up-for-the-first-time","dir":"","previous_headings":"","what":"Setting up for the first time","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"VertexWiseR can installed loaded using following code R: VertexWiseR imports makes use R package reticulate. reticulate allows R borrow translate python functions R. Using reticulate, VertexWiseR calls functions BrainStat Python module. BrainStat also comes number fsaverage templates cortical analyses can downloaded setting VertexWiseR. reticulate work properly, Python environment must installed — default choice VertexWiseR let reticulate (v1.41.0) create ephemeral Python virtual environment using UV py_require().1 function can run download install system requirements (Python environment, BrainStat, BrainStat’s fsaverage/parcellation templates):","code":"install.packages('VertexWiseR') library(VertexWiseR)  ##Alternatively #install.packages(c(\"devtools\",\"R.rsp\") #devtools::install_github(\"CogBrainHealthLab/VertexWiseR\", build_vignettes = TRUE) VWRfirstrun()"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"VertexWiseR comes number tutorial vignettes can navigated using following function, also helps user download demo data:","code":"getting_started()"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"loading-datasets","dir":"","previous_headings":"Example analysis","what":"Loading datasets","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"example, use Spreng colleagues’ neurocognitive aging openneuro dataset ds003592: dataset T1 weighted images preprocessed using recon-FreeSurfer pipeline. tutorial reiterate steps. detailed guide surface extraction (FreeSurfer, CAT12, fMRIprep/XCP-D/HPC HippUnfold outputs), see Extracting surface data VertexWiseR article. , explain , given FreeSurfer subject directory, VertexWiseR extracts surface-based measures synthesizes whole-sample data compact matrix object (.rds) later analyses. SURFvextract() function can extract surface-based measures including ‘thickness’, ‘curv’, ‘sulc’, ‘area’. , interested cortical thickness (CT), command entered extract CT Spreng dataset follows (sdirpath just example): cortical thickness matrix object extracted Spreng dataset included VertexWiseR git repository can loaded following code:","code":"demodata = readRDS(system.file('demo_data/SPRENG_behdata_site1.rds', package = 'VertexWiseR')) SURFvextract(sdirpath = \"spreng_freesurfer_subjectsdir/\", filename = \"SPRENG_CTv.rds\", measure = \"thickness\") SPRENG_CTv=readRDS(file=url(\"https://github.com/CogBrainHealthLab/VertexWiseR/blob/main/inst/demo_data/SPRENG_CTv_site1.rds?raw=TRUE\"))"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"smoothing-the-surface-data","dir":"","previous_headings":"Example analysis","what":"Smoothing the surface data","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"VertexWiseR gives option smooth surface data desired full width half maximum (FWHM) value. can also optionally directly done option RFT_vertex_analysis() discussed . , smooth analysis 10 mm:","code":"SPRENG_CTv = smooth_surf(SPRENG_CTv, 10)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"preparing-the-model","dir":"","previous_headings":"Example analysis","what":"Preparing the model","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"vertex-wise analysis model works multiple regression model Dependent Variable/outcome CT vertex, decide Independent Variables/predictors enter model predict vertices’ CT. example, shall use age sex predict CT. Among IVs, mostly interested age, sex entered model control confounding influence CT. thus select two variables save new data.frame called all_pred.","code":"all_pred=demodata[,c(\"sex\",\"age\")] head(all_pred) ##   sex age ## 1 F   21 ## 2 F   73 ## 3 F   77 ## 4 M   68 ## 5 F   60 ## 6 F   71"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"the-actual-analysis","dir":"","previous_headings":"Example analysis","what":"The actual analysis","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"next code chunk runs analysis. optional p parameter RFT_vertex_analysis() function specify p threshold; default p set 0.05. atlas label significant clusters can also set (1=aparc/Desikan-Killiany-70 (default), 2=Schaefer-100, 3=Schaefer-200, 4=Glasser-360, 5=Destrieux-148). second line displays results. results, clusters appear Positive contrast section clusters vertices correlate positively contrast variable, vice-versa Negative contrast. nverts: number vertices cluster P: p-value cluster X, Y Z: MNI coordinates vertex highest t-stat cluster tstat: t statistic vertex highest t-stat cluster region: region highest t-stat vertex located . , determined/labelled using Desikan atlas","code":"results=RFT_vertex_analysis(model = all_pred, contrast =all_pred$age, surf_data = SPRENG_CTv, atlas = 1) print(results$cluster_level_results) ## $`Positive contrast` ## clusid nverts     P     X    Y   Z tstat          region ## 1      1    142 0.015 -22.8 11.5 -42  6.45 lh-temporalpole  ## $`Negative contrast` ##   clusid nverts      P   X     Y     Z  tstat              region ## 1      1   8039 <0.001  47   4.0 -16.6 -12.64 rh-superiortemporal ## 2      2   7660 <0.001 -34 -25.7  16.2 -14.23           lh-insula"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"plotting","dir":"","previous_headings":"Example analysis","what":"Plotting","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"surf_data: numeric vector (length V) matrix (N rows x V columns), N number subplots, V number vertices. can output SURFvextract(), FSLRvextract(), CAT12vextract(), HIPvextract() well masks vertex-wise results outputted analyses functions. filename: string object containing desired name output .png. Default ‘plot.png’ R temporary directory (tempdir()).filenames .png extension allowed. cmap (optional) : string object specifying name existing colormap vector hexadecimal color codes used custom colormap. names existing colormaps listed . Default cmap set \"Reds\" positive values, \"Blues_r\" negative values \"RdBu\" positive negative values exist. title (optional) : string object setting title plot. Default none. titles long fully displayed within plot, recommend splitting multiple lines inserting “\\n”. surface (optional) : string object containing name type cortical surface background rendered. Possible options include \"white\", \"smoothwm\",\"pial\" \"inflated\" (default). surface parameter ignored hippocampal surface data.","code":"plot_surf(surf_data = results$thresholded_tstat_map, filename = 'sigcluster.png', surface = 'inflated', cmap = 'seismic')"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"extracting-the-ct-values-for-each-subject","dir":"","previous_headings":"Example analysis","what":"Extracting the CT values for each subject","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"want carry follow-analyses (e.g., mediation), might want extract, subject dataset, mean CT significant clusters colored red (positive clusters). can simply matrix multiplication (operator matrix multiplication :%*%) CT data SPRENG_CTv positive mask results$pos_mask . mask context brain images refers vector 1s 0s. case, vertices within significant clusters coded 1s, vertices outside significant clusters coded 0s. sum(results$pos_mask) gives sum 1s, essentially number significant vertices. Thus, SPRENG_CTv %*% results$pos_mask divided sum(results$pos_mask) obtain average CT value. , average CT saved new variable sig_avCT within demodata dataframe. sanity check, mean CT values correlate age","code":"demodata$sig_avCT=SPRENG_CTv %*% results$pos_mask/sum(results$pos_mask) head(demodata$sig_avCT) ##         [,1] ##[1,] 2.769453 ##[2,] 3.003829 ##[3,] 2.586192 ##[4,] 2.851196 ##[5,] 3.199390 ##[6,] 3.050331 cor.test(demodata$sig_avCT,demodata$age) ## ##Pearson's product-moment correlation ## ##data:  demodata$sig_avCT and demodata$age ##t = 4.826, df = 236, p-value = 2.502e-06 ##alternative hypothesis: true correlation is not equal to 0 ##95 percent confidence interval: ## 0.1793792 0.4111954 ##sample estimates: ##      cor ##0.2997047"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"introduction","dir":"","previous_headings":"Meta-analytic decoding","what":"Introduction","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"running whole-brain vertex-wise analyses, may able identify regions brain cortical thickness (CT) values significantly different groups CT values predict certain IV significantly. make sense regions? can plot results using plot_surf() function, still, may difficult interpret results terms functional relevance regions identified. present tool can use facilitate interpretations. tool correlate input image (cortical surface maps obtained earlier vertex-wise analysis, currently supporting fsaverage5 surface space) images large database task-based fMRI voxel-based morphometric studies. images database tagged keywords, describing task /sample characteristics. correlations carried essentially measure similar input image images database. Higher correlations mean input image looks similar certain image database, thus keywords associated image database highly relevant input image. example, first run whole-brain vertex-wise analysis compare cortical thickness males females young adult population SPRENG dataset. thresholded cortical surface maps obtained analysis fed image-decoding procedure identify keywords relevant results NiMARE python module needed order imaging decoding work. similarly imported VertexWiseR via reticulate decode_surf_data() function.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"load-and-prepare-data","dir":"","previous_headings":"Meta-analytic decoding","what":"Load and prepare data","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"","code":"#filter out old participants dat_beh=demodata[demodata$agegroup==\"Y\",] dat_CT=SPRENG_CTv[demodata$agegroup==\"Y\",]  all_pred=dat_beh[,c(\"site\",\"age\",\"sex\")] head(all_pred) ##    site age sex ## 1     1  21   F ## 15    1  32   M ## 16    1  20   M ## 17    1  21   M ## 18    1  24   M ## 19    1  20   M"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"vertex-wise-analysis","dir":"","previous_headings":"Meta-analytic decoding","what":"Vertex-wise analysis","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"According results, since female sex coded 0 males 1 (can done manually beforehand), regions colored red thicker males.","code":"results=RFT_vertex_analysis(model = all_pred, contrast =all_pred$sex, surf_data = dat_CT) results$cluster_level_results ## The binary variable 'sex' will be recoded with F=0 and M=1 for the analysis ## ## smooth_FWHM argument was not given. surf_data will not be smoothed here. ## ## $`Positive contrast` ##   clusid nverts      P     X     Y     Z tstat              region ## 1      1    301 <0.001 -40.7 -13.0  16.5  5.06      lh-postcentral ## 2      2    181  0.002  56.3  12.1 -10.1  4.43 rh-superiortemporal ## 3      3    150  0.003  21.9 -51.6  -1.2  4.41          rh-lingual ## ## $`Negative contrast` ## [1] \"No significant clusters\" plot_surf(surf_data = results$thresholded_tstat_map,filename = \"sexdiff.png\")"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/index.html","id":"image-decoding","dir":"","previous_headings":"Meta-analytic decoding","what":"Image decoding","title":"Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal Surface","text":"Now, let’s enter thresholded_tstat_map decode_img() function. previous results contained positive clusters. case bidirectionality, function requires choose one direction contrast option. instance, simply decode positive clusters, setting contrast=\"positive\". running first time, ~7.5 MB file neurosynth_dataset.pkl.gz needs downloaded current directory decoding work. file contain images Neurosynth database correlated input image. Run VWRfirstrun(requirement=‘neurosynth’) assist data’s installation. procedure display top 10 keywords images database correlated input image. According results, can see positive clusters (thicker males) typically found associated pain auditory processing. simply run keyword without specifying index within square brackets [1:10,]. 715 keywords displayed. presentation slides results section paper, might want illustrate keywords using wordcloud paletteer packages. can set size keyword vary according r value:  keywords may accurate give rough idea interpreting results. Take note keywords specific positive clusters.","code":"keywords=decode_surf_data(surf_data=results$thresholded_tstat_map, contrast = \"positive\") ##Converting and interpolating the surface data ... ##✓ ## Correlating input image with images in the neurosynth database. This may take a while ... ## ##✓ print(keywords[1:10,]) ##      keyword     r ##449      pain 0.099 ##50   auditory 0.098 ##648  temporal 0.093 ##617    speech 0.092 ##334 listening 0.089 ##607    sounds 0.070 ##450   painful 0.068 ##4    acoustic 0.062 ##397     music 0.062 ##398   musical 0.062 #install.packages(\"wordcloud\",\"paletteer\") library(wordcloud) library(paletteer)  wordcloud(words = keywords$keyword, ##keyword input           freq = keywords$r, ##setting the size of the keyword to vary with its r value           min.freq = 0.05, ##minimum r value in order for the keyword to be displayed           colors=paletteer_c(\"grDevices::Temps\", 10) ##color scheme           ,scale=c(1,2)            )            par(mar = rep(0, 4))"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/atlas_to_surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Atlas to surface — atlas_to_surf","title":"Atlas to surface — atlas_to_surf","text":"Maps average parcellation surface values (e.g. produced surf_to_atlas() function) fsaverage5, fsaverage6 fslr32k space","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/atlas_to_surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atlas to surface — atlas_to_surf","text":"","code":"atlas_to_surf(parcel_data, template)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/atlas_to_surf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atlas to surface — atlas_to_surf","text":"parcel_data matrix vector object containing average surface measures region interest, see surf_to_atlas() output format. template string object stating surface space map data ('fsaverage5', 'fsaverage6', 'fslr32k', 'CIT168' (hippocampal)).","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/atlas_to_surf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atlas to surface — atlas_to_surf","text":"matrix vector object containing vertex-wise surface data mapped fsaverage5, fsaverage6, fslr32k, CIT168 space","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/atlas_to_surf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Atlas to surface — atlas_to_surf","text":"function currently supports Desikan-Killiany-70, Schaefer-100, Schaefer-200, Schaefer-400, Glasser-360, Destrieux-148 atlases cortical surfaces, 'bigbrain' 10-parcels atlas hippocampal surfaces. ROI vertex mapping data 1 4 obtained 'ENIGMA toolbox' ; data 5 'Nilearn' 's nilearn.datasets.fetch_atlas_surf_destrieux . atlas_to_surf() automatically detect atlas based number columns.","code":""},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/atlas_to_surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atlas to surface — atlas_to_surf","text":"","code":"parcel_data = t(runif(100,min=0, max=100)); surf_data = atlas_to_surf(parcel_data, template='fsaverage5');"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/CAT12vextract.html","id":null,"dir":"Reference","previous_headings":"","what":"CAT12vextract — CAT12vextract","title":"CAT12vextract — CAT12vextract","text":"Extracts vertex-wise surface-based measures subject CAT12 preprocessed directory, resampled 32k mesh, stores single .RDS file.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/CAT12vextract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CAT12vextract — CAT12vextract","text":"","code":"CAT12vextract(   sdirpath = \"./\",   filename,   measure = \"thickness\",   subj_ID = TRUE,   silent = FALSE,   VWR_check = TRUE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/CAT12vextract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CAT12vextract — CAT12vextract","text":"sdirpath string object containing path CAT12 subjects preprocessed directory. Default current working directory (\"./\"). filename string object containing desired name output RDS file. Default 'CAT12_measure.rds' R temporary directory (tempdir()). measure string object containing name measure interest. Options 'thickness', 'depth', 'fractaldimension', 'gyrification', 'toroGI20mm'. Default 'thickness.' subj_ID logical object determine whether return list object containing subject ID data matrix. Subject IDs assumed top directory names sdirpath. silent logical object determine whether messages silenced. Set 'FALSE' default VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/CAT12vextract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CAT12vextract — CAT12vextract","text":".RDSfile list containing 1. list subject IDs (first element) 2. surface data matrix object (second element), data matrix object. matrix N subjects x M vertices dimensions can readily used VertexWiseR statistical analysis functions. row corresponds subject (order listed folder) contains left right hemispheres' vertex-wise values.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/CAT12vextract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CAT12vextract — CAT12vextract","text":"function searches inside CAT12 preprocessed 32k meshes (.gii) user-selected measure, extracts data files, organizes left right hemisphere vertex data subject rows N x 64984 data matrix within .rds object. Python reticulate required NiBabel package used import .gii files outputted CAT12.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/CAT12vextract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CAT12vextract — CAT12vextract","text":"","code":"CAT12vextract(sdirpath=\"./\",  filename='thickness.rds',  measure='thickness',  subj_ID = TRUE,  VWR_check=FALSE) #> Non-interactive sessions need requirement checks"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/decode_surf_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Decode surface data — decode_surf_data","title":"Decode surface data — decode_surf_data","text":"Correlates significant clusters earlier vertex-wise analysis database task-based fMRI voxel-based morphometric statistical maps associate relevant key words. Decoding currently works surfaces fsaverage5 space .\"","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/decode_surf_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decode surface data — decode_surf_data","text":"","code":"decode_surf_data(surf_data, contrast = \"positive\", VWR_check = TRUE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/decode_surf_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decode surface data — decode_surf_data","text":"surf_data numeric vector object containing surface data, fsaverage5 (1 x 20484 vertices) fsLR32k (1 x 64984 vertices) space. can one row vertices (cohort surface data matrix). contrast string object indicating whether decode positive negative mask ('positive' 'negative') VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/decode_surf_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decode surface data — decode_surf_data","text":"data.frame object listing keywords Pearson's R values","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/decode_surf_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decode surface data — decode_surf_data","text":"'NiMARE' python module used imaging decoding imported via reticulate package. function also downloads 'Neurosynth' database package's inst/extdata directory (~8 Mb) analysis.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/decode_surf_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decode surface data — decode_surf_data","text":"","code":"CTv = rbinom(20484, 1, 0.001)  decoding = decode_surf_data(CTv, 'positive', VWR_check=FALSE); #> Non-interactive sessions need requirement checks head(decoding) #> NULL"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/DTSERIESvextract.html","id":null,"dir":"Reference","previous_headings":"","what":"DTSERIESvextract — DTSERIESvextract","title":"DTSERIESvextract — DTSERIESvextract","text":"Extracts vertex-wise surface-based CIFTI dense time-series data individual dtseries .nii file HCP, fMRIprep XCP-D preprocessed directories, stores single .RDS file.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/DTSERIESvextract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DTSERIESvextract — DTSERIESvextract","text":"","code":"DTSERIESvextract(dtseries, wb_path, filename, silent = FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/DTSERIESvextract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DTSERIESvextract — DTSERIESvextract","text":"dtseries string object containing full path dtseries files extract . wb_path filepath workbench folder previously downloaded unzipped filename string object containing desired name output RDS file. Default 'fslr32k.rds' R temporary directory (tempdir()). silent logical object determine whether messages silenced. Set 'FALSE' default","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/DTSERIESvextract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DTSERIESvextract — DTSERIESvextract","text":".RDSfile containing surface data matrix object, N time-point x M vertices dimensions can readily used VertexWiseR statistical analysis functions. row corresponds time point order contains left right hemispheres' vertex-wise values.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/DTSERIESvextract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DTSERIESvextract — DTSERIESvextract","text":"function extracts data dtseries.nii file provided, organizes left right hemisphere vertex data subject rows N x 64984 data matrix within .rds object.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/DTSERIESvextract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DTSERIESvextract — DTSERIESvextract","text":"","code":"#demo cifti dtseries from openneuro #(ds005012, sub-18_ses-1_task-mid, run-01,  #reduced to 50 time points) download.file(paste0(\"https://github.com/CogBrainHealthLab\", \"/VertexWiseR/blob/main/inst/demo_data/\", \"demo_91k_bold.dtseries.nii?raw=TRUE\"), destfile=paste0(tempdir(), \"/demo_91k_bold.dtseries.nii\"),  mode = \"wb\")               sub_dtseries=DTSERIESvextract( dtseries=paste0(tempdir(),              \"/demo_91k_bold.dtseries.nii\"),  wb_path=\"/path/to/workbench\", filename=\"demo_91k_bold.dtseries.rds\",  silent=FALSE) #> The path to the workbench directory could be not found in the set wb_path.  ##visualizing e.g. the first 4 frames of the fMRI volume #plot_surf(sub_dtseries[c(1,10,20,40),],  #            file=\"4frames.png\")"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/edgelist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge list object — edgelist-class","title":"Edge list object — edgelist-class","text":"class adjacent vertex correspondance","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/edgelist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Edge list object — edgelist-class","text":"matrix N x 2 matrix object listing vertex template vertices adjacent (making edge together). name name template surface","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/edgelist_hip.html","id":null,"dir":"Reference","previous_headings":"","what":"List of edges for the hippocampal template — edgelist_hip","title":"List of edges for the hippocampal template — edgelist_hip","text":"Nx2 matrix object listing vertex hippocampal template vertices adjacent (making edge together).","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/edgelist_hip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of edges for the hippocampal template — edgelist_hip","text":"","code":"edgelist_hip"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/edgelist_hip.html","id":"edgelist-hip","dir":"Reference","previous_headings":"","what":"edgelist_hip","title":"List of edges for the hippocampal template — edgelist_hip","text":"Nx2 matrix object Matrix two columns N rows corresponding unique edges fsaverage5 surface","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs5_to_fs6.html","id":null,"dir":"Reference","previous_headings":"","what":"fsaverage5 to fsaverage6 — fs5_to_fs6","title":"fsaverage5 to fsaverage6 — fs5_to_fs6","text":"Remaps vertex-wise surface data fsaverage5 space fsaverage6 space using nearest neighbor approach","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs5_to_fs6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fsaverage5 to fsaverage6 — fs5_to_fs6","text":"","code":"fs5_to_fs6(surf_data)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs5_to_fs6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fsaverage5 to fsaverage6 — fs5_to_fs6","text":"surf_data N x V matrix object containing surface data (N row subject, V vertex), fsaverage5 (20484 vertices)  space. See also SURFvextract() output format.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs5_to_fs6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fsaverage5 to fsaverage6 — fs5_to_fs6","text":"matrix object containing vertex-wise surface data mapped fsaverage6 space","code":""},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs5_to_fs6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fsaverage5 to fsaverage6 — fs5_to_fs6","text":"","code":"CTv = runif(20484,min=0, max=100); CTv_fs6 = fs5_to_fs6(CTv);"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5.html","id":null,"dir":"Reference","previous_headings":"","what":"fsaverage6 to fsaverage5 — fs6_to_fs5","title":"fsaverage6 to fsaverage5 — fs6_to_fs5","text":"Remaps vertex-wise surface data fsaverage6 space fsaverage5 space using nearest neighbor approach","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fsaverage6 to fsaverage5 — fs6_to_fs5","text":"","code":"fs6_to_fs5(surf_data)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fsaverage6 to fsaverage5 — fs6_to_fs5","text":"surf_data N x V matrix object containing surface data (N row subject, V vertex), fsaverage6 (81924 vertices) space. See also SURFvextract() output format.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fsaverage6 to fsaverage5 — fs6_to_fs5","text":"matrix object containing vertex-wise surface data mapped fsaverage5 space","code":""},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fsaverage6 to fsaverage5 — fs6_to_fs5","text":"","code":"surf_data = runif(81924,min=0, max=100); fs5_data=fs6_to_fs5(surf_data)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5_map.html","id":null,"dir":"Reference","previous_headings":"","what":"fsaverage6 template object for nearest neighbor conversion in fs6_to_fs5() — fs6_to_fs5_map","title":"fsaverage6 template object for nearest neighbor conversion in fs6_to_fs5() — fs6_to_fs5_map","text":"fsaverage6 template object nearest neighbor conversion fs6_to_fs5()","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fsaverage6 template object for nearest neighbor conversion in fs6_to_fs5() — fs6_to_fs5_map","text":"","code":"fs6_to_fs5_map"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs6_to_fs5_map.html","id":"fs-to-fs-map","dir":"Reference","previous_headings":"","what":"fs6_to_fs5_map","title":"fsaverage6 template object for nearest neighbor conversion in fs6_to_fs5() — fs6_to_fs5_map","text":"array 81924 integers () vertices 81924 integers corresponding fsaverage6 vertex","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/FSLRvextract.html","id":null,"dir":"Reference","previous_headings":"","what":"FSLRvextract — FSLRvextract","title":"FSLRvextract — FSLRvextract","text":"Extracts vertex-wise surface-based measures subject HCP, fMRIprep XCP-D preprocessed directories, stores single .RDS file.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/FSLRvextract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FSLRvextract — FSLRvextract","text":"","code":"FSLRvextract(   sdirpath = \"./\",   wb_path,   filename,   dscalar,   subj_ID = TRUE,   silent = FALSE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/FSLRvextract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FSLRvextract — FSLRvextract","text":"sdirpath string object containing path HCP fMRIprep preprocessed directory. Default current working directory (\"./\"). wb_path filepath workbench folder previously downloaded unzipped filename string object containing desired name output RDS file. Default 'fslr32k.rds' R temporary directory (tempdir()). dscalar string object containing filename suffix dscalar file. dscalar files named differently depending preprocessing pipeline used. Examples filename suffixes shown .thickness_MSMAll.32k_fs_LR.dscalar.nii (HCP MSMAll pipeline) .sulc_MSMAll.32k_fs_LR.dscalar.nii (HCP MSMAll pipeline) .thickness.32k_fs_LR.dscalar.nii (HCP legacy pipeline) .sulc.32k_fs_LR.dscalar.nii (HCP legacy pipeline) _space-fsLR_den-91k_thickness.dscalar.nii (fMRIprep; using --cifti-output 91k flag) _space-fsLR_den-91k_curv.dscalar.nii (fMRIprep; using --cifti-output 91k flag) _space-fsLR_den-91k_sulc.dscalar.nii (fMRIprep; using --cifti-output 91k flag) subj_ID logical object determine whether return list object containing subject ID data matrix. silent logical object determine whether messages silenced. Set 'FALSE' default","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/FSLRvextract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FSLRvextract — FSLRvextract","text":".RDSfile list containing 1. list subject IDs (first element) 2. surface data matrix object (second element), data matrix object. matrix N subjects x M vertices dimensions can readily used VertexWiseR statistical analysis functions. row corresponds subject (order listed folder) contains left right hemispheres' vertex-wise values.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/FSLRvextract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FSLRvextract — FSLRvextract","text":"function searches HCP preprocessed directory listing files certain suffixes, extracts data files, organizes left right hemisphere vertex data subject rows N x 64984 data matrix within .rds object.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/FSLRvextract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FSLRvextract — FSLRvextract","text":"","code":"dat_fslr32k=FSLRvextract(sdirpath=\"./\",  wb_path=\"/path/to/workbench\", filename=\"dat_fslr32k.rds\", dscalar=\".thickness_MSMAll.32k_fs_LR.dscalar.nii\",  subj_ID = TRUE, silent=FALSE) #> No *.thickness_MSMAll.32k_fs_LR.dscalar.nii files could be found in the set sdirpath"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"fs_stats() — fs_stats","title":"fs_stats() — fs_stats","text":"Extracts descriptive statistics, whole-brain subcortical region--interests (ROI), within FreeSurfer subjects directory. reads aseg.stats file, generated default FreeSurfer preprocessing pipeline.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fs_stats() — fs_stats","text":"","code":"fs_stats(sdirpath = \"./\", sublist, ROImeasure = \"Volume_mm3\")"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fs_stats() — fs_stats","text":"sdirpath string object indicating path 'FreeSurfer' subjects directory. Default current working directory (\"./\"). sublist string object indicating path subject list generated SURFvextract 'sublist.txt' (optional). allows users retrieve stats selected list subjects. subject list list 1 subject ID per line. ROImeasure string object indicating summary measure extract subocrtical ROIs. Choices include: 'NVoxels', 'Volume_mm3', 'StructName', 'normMean', 'normStdDev', 'normMin', 'normMax', 'normRange'. Default 'Volume_mm3'.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fs_stats() — fs_stats","text":"data.frame object N columns per aseg.stats measures N row per subjects.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/fs_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fs_stats() — fs_stats","text":"","code":"fs_stats(sdirpath=\"freesurfer_subjdir\") #> aseg.stats files could not be found in the set sdirpath"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/getting_started.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting started with tutorials — getting_started","title":"Getting started with tutorials — getting_started","text":"Guides user various tutorials assist downloading demo data","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/getting_started.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting started with tutorials — getting_started","text":"","code":"getting_started(demo_data = TRUE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/getting_started.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting started with tutorials — getting_started","text":"demo_data boolean object specifying whether prompt user downloading demo data (default TRUE)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/getting_started.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting started with tutorials — getting_started","text":"","code":"getting_started()"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/HIPvextract.html","id":null,"dir":"Reference","previous_headings":"","what":"HIPvextract — HIPvextract","title":"HIPvextract — HIPvextract","text":"Extracts hippocampal vertex-wise surface-based measures subject 'HippUnfold' subjects directory, stores single .RDS file.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/HIPvextract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HIPvextract — HIPvextract","text":"","code":"HIPvextract(sdirpath = \"./\", filename, measure = \"thickness\", subj_ID = TRUE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/HIPvextract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HIPvextract — HIPvextract","text":"sdirpath string object containing path 'HippUnfold' subjects directory. Default current working directory (\"./\"). filename string object containing desired name output RDS file. Default 'hip_measure.rds' R temporary directory (tempdir()). measure string object containing name measure interest. Options 'thickness','curvature','gyrification' 'surfarea' (information see 'HippUnfold' documentation). Default thickness. subj_ID logical object stating whether return list object containing subject ID data matrix.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/HIPvextract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HIPvextract — HIPvextract","text":".RDSfile list containing 1. list subject IDs (first element) 2. surface data matrix object (second element), data matrix object. matrix N subjects x M vertices dimensions can readily used VertexWiseR statistical analysis functions. row corresponds subject (order listed folder) contains left right hemispheres' hippocampal vertex-wise values.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/HIPvextract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HIPvextract — HIPvextract","text":"function searches hippocampal surface data listing files certain suffixes, extract data files, organize left right hippocampal vertex data subject rows N x 14524 data matrix within .rds object.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/HIPvextract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HIPvextract — HIPvextract","text":"","code":"HIPvextract(sdirpath = \"./\", filename = paste0(tempdir(),\"/hip_data.RDS\"), measure = \"thickness\")  #> HippUnfold data could not be found in the set sdirpath"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/hip_points_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"points and cells data required to build the hippocampus surface template — hip_points_cells","title":"points and cells data required to build the hippocampus surface template — hip_points_cells","text":"points cells data required build hippocampus surface template","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/hip_points_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"points and cells data required to build the hippocampus surface template — hip_points_cells","text":"","code":"hip_points_cells"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/hip_points_cells.html","id":"hip-points-cells","dir":"Reference","previous_headings":"","what":"hip_points_cells","title":"points and cells data required to build the hippocampus surface template — hip_points_cells","text":"list object two data frame objects: () vertices data frame 7262 rows (vertices), 3 columns (MNI coordinates X, y, Z) vertices data frame 14266 rows (vertices), 3 columns (vertices unique triangles vertices data frame 7262 rows (vertices), 3 columns (MNI coordinates X, y, Z unfolded hippocampal surface)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/MNImap_hip.html","id":null,"dir":"Reference","previous_headings":"","what":"Hippocampal surface in MNI space — MNImap_hip","title":"Hippocampal surface in MNI space — MNImap_hip","text":"matrix 14524 columns corresponding hippocampal template vertices 3 rows corresponding vertex's X,Y,Z coordinates MNI space","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/MNImap_hip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hippocampal surface in MNI space — MNImap_hip","text":"","code":"MNImap_hip"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/MNImap_hip.html","id":"mnimap-hip","dir":"Reference","previous_headings":"","what":"MNImap_hip","title":"Hippocampal surface in MNI space — MNImap_hip","text":"3x14524 matrix object coordinates 14524 rows (vertices), 3 columns (X,Y,Z coordinates)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/MNIsurface-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MNI surface map object — MNIsurface-class","title":"MNI surface map object — MNIsurface-class","text":"class surface coordinates MNI space","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/MNIsurface-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MNI surface map object — MNIsurface-class","text":"matrix matrix object N vertices columns x  3 rows corresponding vertex's X,Y,Z coordinates MNI space. name name template surface","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_overlay_surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Surface overlay plotter — plot_overlay_surf","title":"Surface overlay plotter — plot_overlay_surf","text":"Plots surface data grid one multiple rows .png file","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_overlay_surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surface overlay plotter — plot_overlay_surf","text":"","code":"plot_overlay_surf(   model_output = NULL,   surf_data_1 = NULL,   surf_data_2 = NULL,   cmap_1,   cmap_2,   limits_1,   limits_2,   alpha_1 = 1,   alpha_2 = 1,   colorbar_1 = TRUE,   colorbar_2 = TRUE,   show_nan = TRUE,   filename,   title = \"\",   surface = \"inflated\",   overlay_boundaries = FALSE,   size,   zoom,   transparent_bg = FALSE,   show.plot.window = TRUE,   VWR_check = TRUE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_overlay_surf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surface overlay plotter — plot_overlay_surf","text":"model_output list object outputted RFT_vertex_analysis() TFCE_threshold(). 'tstat_map' automatically treated background map, 'thresholded_tstat_map' overlay map. See surf_data_1 surf_data_2 assign map manually. surf_data_1 numeric vector (length V), V number vertices. can one row output SURFvextract(), CAT12vextract(), FSLRvextract(), well masks vertex-wise results outputted analyses functions. background surface. surf_data_2 surf_data_1. overlay surface. cmap_1 string object specifying name existing colormap vector hexadecimal color codes used custom colormap. names existing colormaps listed 'Matplotlib' plotting library. Default cmap set \"Reds\" positive values, \"Blues_r\" negative values \"RdBu\" positive negative values exist. meant background surface. cmap_2 cmap_1. meant overlay surface. Default cmaps_1, adapted limits surf_data_2. limits_1 combined pair numeric vector composed lower upper color scale limits surf_data_1. left unspecified,  symmetrical limits c(-max(abs(surf_data_1),max(abs(surf_data_1))) used. set NULL, limits correspond min max values surf_data_1. meant background surface. limits_2  limits_1, also string object \"\". Default symmetrical limits relative surf_data_2, '' apply exact limits limits_1. meant overlay surface. alpha_1 numeric object 0 1 determine opacity non-empty vertices. Note true opacity setting, blend colour NaN vertices (white show_nan FALSE). meant background surface. alpha_2 alpha_2. meant overlay surface. Default alpha_1. colorbar_1 logical object stating whether include color bar background layer plot (default TRUE). colorbar_2 logical object stating whether include color bar overlay layer plot (default TRUE). show_nan logical object determine NaN vertices plotted (Default TRUE). meant background surface. overlay surface always omit NaN vertices make background visible. filename string object containing desired name output .png. Default 'combined_plots.png' R temporary directory (tempdir()).filenames .png extension allowed. title string object setting title plot. Default none. titles long fully displayed within plot, recommend splitting multiple lines inserting \"\\n\". surface string object containing name type cortical surface background rendered. Possible options include \"white\", \"smoothwm\",\"pial\" \"inflated\" (default). overlay_boundaries logical object stating whether plot black contour overlay layer. size combined pair numeric vector indicating image dimensions (width height pixels). Default c(1700,400). Note size depend inclusion color bar(s), expand width ~5% per color bar. zoom numeric value adjusting level zoom figures. Default 1.25. transparent_bg logical object determine background image set transparent (Default FALSE). show.plot.window logical object determine generated plot shown within RStudio's plot window VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_overlay_surf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Surface overlay plotter — plot_overlay_surf","text":"Outputs plot .png image","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_overlay_surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surface overlay plotter — plot_overlay_surf","text":"","code":"#simulate t-map background=rep(NA,20484); ROImap_fs5 <- get('ROImap_fs5') ROImap <- list(ROImap_fs5@data,ROImap_fs5@atlases) neg_parts <- c(1:100) idx_neg <- which(ROImap[[1]][,1] %in% neg_parts) background[idx_neg]=runif(length(idx_neg),-1,0) pos_parts <- c(18:46) idx_pos <- which(ROImap[[1]][,1] %in% pos_parts) background[idx_pos]=runif(length(idx_pos),0,1) #simulate clusters (randomly picked aparc atlas parcels) idx_sig=which(ROImap[[1]][,1]==29| ROImap[[1]][,1]==19|              ROImap[[1]][,1]==45) overlay = rep(NA,20484); overlay[idx_sig]=1                                  plot_overlay_surf(surf_data_1=background,                 surf_data_2=overlay,                 cmap_1='RdBu_r', cmap_2='Reds',                 alpha_1=0.4, alpha_2=1,                 filename=paste0(tempdir(),\"/simulated_plot.png\"),                 title=\"Significant effects\",                overlay_boundaries=TRUE,                VWR_check=FALSE) #> Non-interactive sessions need requirement checks"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Surface plotter — plot_surf","title":"Surface plotter — plot_surf","text":"Plots surface data grid one multiple rows .png file","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surface plotter — plot_surf","text":"","code":"plot_surf(   surf_data,   filename,   title = \"\",   surface = \"inflated\",   cmap,   limits,   colorbar = TRUE,   size,   zoom,   transparent_bg = FALSE,   show_nan = T,   alpha = 1,   show.plot.window = TRUE,   VWR_check = TRUE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surface plotter — plot_surf","text":"surf_data numeric vector (length V) matrix (N rows x V columns), N number subplots, V number vertices. can output SURFvextract(), CAT12vextract(), FSLRvextract(), HIPvextract() well masks vertex-wise results outputted analyses functions. Alternatively, atlas ROI values supported atlas_to_surf() may given. filename string object containing desired name output .png. Default 'plot.png' R temporary directory (tempdir()).filenames .png extension allowed. title string object setting title plot. Default none. titles long fully displayed within plot, recommend splitting multiple lines inserting \"\\n\". surface string object containing name type cortical surface background rendered. Possible options include \"white\", \"smoothwm\",\"pial\" \"inflated\" (default). surface parameter ignored hippocampal surface data. cmap string object specifying name existing colormap vector hexadecimal color codes used custom colormap. names existing colormaps listed 'Matplotlib' plotting library. Default cmap set \"Reds\" positive values, \"Blues_r\" negative values \"RdBu\" positive negative values exist. limits combined pair numeric vector composed lower upper color scale limits plot. limits specified, limits applied subplots. left unspecified, symmetrical limits c(-max(abs(surf_dat),max(abs(surf_dat))) used subplots. set NULL, subplot limits corresponding min max values colorbar logical object stating whether include color bar plot (default TRUE). size combined pair numeric vector indicating image dimensions (width height pixels). Default c(1920,400) whole-brain surface c(400,200) hippocampal surface. zoom numeric value adjusting level zoom figures. Default 1.25 whole-brain surface 1.20 hippocampal surface. transparent_bg logical object determine background image set transparent (Default FALSE). show_nan logical object determine NaN vertices plotted (Default TRUE). alpha numeric object 0 1 determine opacity non-empty vertices. Note true opacity setting, blend colour NaN vertices (white show_nan FALSE) show.plot.window logical object determine generated plot shown within RStudio's plot window VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Surface plotter — plot_surf","text":"Outputs plot .png image","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surface plotter — plot_surf","text":"","code":"results = runif(20484,min=0, max=1); plot_surf(surf_data = results,  filename=paste0(tempdir(),\"/output.png\"), title = 'Cortical thickness',  surface = 'inflated', cmap = 'Blues', VWR_check=FALSE) #> Non-interactive sessions need requirement checks"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Surface plotter — plot_surf3d","title":"3D Surface plotter — plot_surf3d","text":"Plots 3D cortical surfaces","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Surface plotter — plot_surf3d","text":"","code":"plot_surf3d(   surf_data,   surf_color = \"grey\",   cmap,   limits,   atlas = 1,   hemi = \"b\",   medial_gap = 0,   orientation_labels = TRUE,   VWR_check = TRUE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Surface plotter — plot_surf3d","text":"surf_data numeric vector (length V) surf_color color cortical surface. Set 'grey' default cmap string vector containing 2 4 color names/codes specifying colors used color scale. See RColorBrewer::display.brewer.() possible cmap options. none specified, appropriate colors automatically selected according range(surf_data) limits combined pair numeric vector composed lower upper color scale limits plot. left unspecified, symmetrical limits c(-max(abs(surf_dat),max(abs(surf_dat))) used. atlas atlas used identifying region labels. 1=Desikan, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400. Set 1 default. argument ignored hippocampal surfaces. hemi string specifying hemisphere plot. Possible values l (left), r (right) b (). medial_gap numeric value specifying amount gap (MNI coordinate units) separate left right hemispheres. Set 0 (gap hemispheres) default. order view medial surfaces clearly, recommended value set 20. argument ignored hemi!='b' orientation_labels boolean object specifying orientation labels displayed. Set TRUE default VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"3D Surface plotter — plot_surf3d","text":"plot_ly object","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/plot_surf3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Surface plotter — plot_surf3d","text":"","code":"surf_data = runif(20484); plot_surf3d(surf_data = surf_data, VWR_check=FALSE) #> Non-interactive sessions need requirement checks"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/RFT_vertex_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex-wise analysis with random field theory cluster correction — RFT_vertex_analysis","title":"Vertex-wise analysis with random field theory cluster correction — RFT_vertex_analysis","text":"Fits linear linear mixed model cortical hippocampal surface data predicted outcome, returns cluster-thresholded (Random field theory) t-stat map selected contrast.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/RFT_vertex_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex-wise analysis with random field theory cluster correction — RFT_vertex_analysis","text":"","code":"RFT_vertex_analysis(   model,   contrast,   random,   formula,   formula_dataset,   surf_data,   p = 0.05,   atlas = 1,   smooth_FWHM,   VWR_check = TRUE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/RFT_vertex_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex-wise analysis with random field theory cluster correction — RFT_vertex_analysis","text":"model N X P data.frame object containing N rows subject P columns predictor included model. data.frame include random effects variable. contrast N x 1 numeric vector object containing values predictor interest. length equal number subjects model (can single column model). cluster-thresholded t-stat maps estimated predictor. random N x 1 numeric vector object containing values random variable (optional). length equal number subjects model (inside model data.frame). formula optional string formula object describing predictors fitted surface data, replacing model, contrast, random arguments. argument used, formula_dataset argument must also provided. dependent variable needed, always surface data values. first independent variable formula always interpreted contrast interest estimate cluster-thresholded t-stat maps. one random regressor can given must indicated '(1|variable_name)'. formula_dataset optional data.frame object containing independent variables used formula (IV names formula must match column names dataset). surf_data N x V matrix object containing surface data (N row subject, V vertex), fsaverage5 (20484 vertices), fsaverage6 (81924 vertices), fslr32k (64984 vertices) hippocampal (14524 vertices) space. See also Hipvextract(), SURFvextract() FSLRvextract output formats. Alternatively, string object containing path surface object (.rds file) outputted extraction functions may given. p numeric object specifying p-value threshold results (Default 0.05) atlas numeric integer object corresponding atlas interest.  1=Desikan, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400. Set 1 default. argument ignored hippocampal surfaces. smooth_FWHM numeric vector object specifying desired smoothing width mm. specified surf_data smoothed previously smooth_surf(), result surf_data smoothed twice. VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/RFT_vertex_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertex-wise analysis with random field theory cluster correction — RFT_vertex_analysis","text":"list object containing cluster level results, unthresholded t-stat map, thresholded t-stat map, positive, negative bidirectional cluster maps, FDR-corrected p-value map.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/RFT_vertex_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertex-wise analysis with random field theory cluster correction — RFT_vertex_analysis","text":"function imports adapts  'BrainStat' Python library. default, false discovery rate correction used together Random field theory (RFT) cluster correction. look data without form cluster correction, users can simply refer outputted 'tstat_map'. Output definitions: nverts: number vertices cluster P: p-value cluster X, Y Z: MNI coordinates vertex highest t-statistic cluster. tstat: t statistic vertex highest t-statistic cluster region: region highest -statistic vertex located , determined/labelled selected atlas","code":""},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/RFT_vertex_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertex-wise analysis with random field theory cluster correction — RFT_vertex_analysis","text":"","code":"demodata = readRDS(system.file('demo_data/SPRENG_behdata_site1.rds',  package = 'VertexWiseR'))[1:100,] CTv = readRDS(file = url(paste0(\"https://github.com\", \"/CogBrainHealthLab/VertexWiseR/blob/main/inst/demo_data/\", \"SPRENG_CTv_site1.rds?raw=TRUE\")))[1:100,]   vertexwise_model=RFT_vertex_analysis(model=demodata[,c(\"sex\",\"age\")],  contrast=demodata[,\"age\"], surf_data = CTv, atlas=1,p = 0.05,  VWR_check=FALSE) #> Non-interactive sessions need requirement checks  #Description of the output: #vertexwise_model$cluster_level_results  #Formula alternative: #formula= as.formula(\"~ age + sex\") #vertexwise_model=RFT_vertex_analysis(formula=formula,  #formula_dataset=demodata, surf_data = CTv, atlas=1, p = 0.05,  #VWR_check=FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Region-of-Interest mapping object — ROImap-class","title":"Region-of-Interest mapping object — ROImap-class","text":"class surface vertices mapping atlas labels","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Region-of-Interest mapping object — ROImap-class","text":"matrix matrix object N vertices template parcellation number vertices correspond 6 atlases (6 columns). atlases available 6 available atlases corresponding labels (1=aparc, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400). name name template surface","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fs5.html","id":null,"dir":"Reference","previous_headings":"","what":"Atlas parcellations of fsaverage5 — ROImap_fs5","title":"Atlas parcellations of fsaverage5 — ROImap_fs5","text":"list containing two data frames, 1) listing fsaverage5 vertices parcellation number correspond , 2) listing available atlas corresponding labels (1=aparc, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400).","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fs5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atlas parcellations of fsaverage5 — ROImap_fs5","text":"","code":"ROImap_fs5"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fs5.html","id":"roimap-fs-","dir":"Reference","previous_headings":"","what":"ROImap_fs5","title":"Atlas parcellations of fsaverage5 — ROImap_fs5","text":"list object two data frame objects: () vertices data frame 20484 rows (vertices), 6 columns (atlases) atlases data frame 400 rows (labels, filled depending atlas), 6 columns (atlases)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fs6.html","id":null,"dir":"Reference","previous_headings":"","what":"Atlas parcellations of fsaverage6 — ROImap_fs6","title":"Atlas parcellations of fsaverage6 — ROImap_fs6","text":"list containing two data frames, 1) listing fsaverage6 vertices atlas parcellation number correspond , 2) listing available atlas corresponding labels (1=aparc, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400).","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fs6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atlas parcellations of fsaverage6 — ROImap_fs6","text":"","code":"ROImap_fs6"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fs6.html","id":"roimap-fs-","dir":"Reference","previous_headings":"","what":"ROImap_fs6","title":"Atlas parcellations of fsaverage6 — ROImap_fs6","text":"list object two data frame objects: () vertices data frame 81924 rows (vertices), 6 columns (atlases) atlases data frame 400 rows (labels, filled depending atlas), 6 columns (atlases)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fslr32k.html","id":null,"dir":"Reference","previous_headings":"","what":"Atlas parcellations of FS_LR32k — ROImap_fslr32k","title":"Atlas parcellations of FS_LR32k — ROImap_fslr32k","text":"list containing two data frames, 1) listing FS_LR32k vertices atlas parcellation number correspond , 2) listing available atlas corresponding labels (1=aparc, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400).","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fslr32k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atlas parcellations of FS_LR32k — ROImap_fslr32k","text":"","code":"ROImap_fslr32k"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_fslr32k.html","id":"roimap-fslr-k","dir":"Reference","previous_headings":"","what":"ROImap_fslr32k","title":"Atlas parcellations of FS_LR32k — ROImap_fslr32k","text":"list object two data frame objects: () vertices data frame 64984 rows (vertices), 6 columns (atlases) atlases data frame 400 rows (labels, filled depending atlas), 6 columns (atlases)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_hip.html","id":null,"dir":"Reference","previous_headings":"","what":"Atlas parcellations of the hippocampus (CITI168) — ROImap_hip","title":"Atlas parcellations of the hippocampus (CITI168) — ROImap_hip","text":"list containing 1) matrix listing CITI168 vertices parcellation number correspond ,  2) data frame listing  hippocampal atlas labels.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_hip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atlas parcellations of the hippocampus (CITI168) — ROImap_hip","text":"","code":"ROImap_hip"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/ROImap_hip.html","id":"roimap-hip","dir":"Reference","previous_headings":"","what":"ROImap_hip","title":"Atlas parcellations of the hippocampus (CITI168) — ROImap_hip","text":"list object two data frame objects: () vertices array 14524 numeric vectors (vertices) atlases data frame 10 rows listing names left right hippocampal subfields","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/smooth_surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth surface — smooth_surf","title":"Smooth surface — smooth_surf","text":"Smooths surface data defined full width half maximum (FWHM) per corresponding template surface data","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/smooth_surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth surface — smooth_surf","text":"","code":"smooth_surf(surf_data, FWHM, VWR_check = TRUE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/smooth_surf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth surface — smooth_surf","text":"surf_data N x V matrix object containing surface data (N row subject, V vertex), fsaverage5 (20484 vertices), fsaverage6 (81924 vertices), fslr32k (64984 vertices) hippocampal (14524 vertices) space. See also Hipvextract(), SURFvextract() FSLRvextract output formats. Alternatively, string object containing path surface object (.rds file) outputted extraction functions may given. FWHM numeric vector object containing desired smoothing width mm VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/smooth_surf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth surface — smooth_surf","text":"matrix object smoothed vertex-wise values","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/smooth_surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth surface — smooth_surf","text":"","code":"surf_data = readRDS(file = url(paste0(\"https://github.com\", \"/CogBrainHealthLab/VertexWiseR/blob/main/inst/demo_data/\", \"FINK_Tv_ses13.rds?raw=TRUE\")))[1:3,]  surf_data_smoothed=smooth_surf(surf_data, 10, VWR_check=FALSE); #> Non-interactive sessions need requirement checks"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/SURFvextract.html","id":null,"dir":"Reference","previous_headings":"","what":"SURFvextract — SURFvextract","title":"SURFvextract — SURFvextract","text":"Extracts whole-brain vertex-wise surface-based measures subject 'FreeSurfer' output subjects directory, resamples data common surface template, stores .rds file. function requires 'FreeSurfer' environment preset unix environment 'FreeSurfer' license key.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/SURFvextract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SURFvextract — SURFvextract","text":"","code":"SURFvextract(   sdirpath = \"./\",   filename,   template = \"fsaverage5\",   measure = \"thickness\",   subj_ID = TRUE,   fshomepath )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/SURFvextract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SURFvextract — SURFvextract","text":"sdirpath string object containing path 'FreeSurfer' preprocessed subjects directory. directory must output directory FreeSurfer preprocessing recon-pipeline. Default current working directory (\"./\"). filename string object containing desired name output RDS file. Default 'brain_measure.rds' R temporary directory (tempdir()). template string object containing name surface template (available: 'fsaverage5', 'fsaverage6'). Default fsaverage5. measure string object containing name measure interest. Options include thickness, curv, sulc, area, volume (freesurfer 7.4.1 later). Default thickness. Note non-standard surface measures stored \"surf/\" also work, provided full name extension following lh./rh. given (e.g., \"w-g.pct.mgh\" grey-white matter contrast). subj_ID logical object stating whether include subject IDs (folder names subjects directory) first column output matrix. Default TRUE. fshomepath optional string object containing path FreeSurfer installation directory. makes sure R accesses FreeSurfer system environment variables inherited — case running function RStudio.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/SURFvextract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SURFvextract — SURFvextract","text":".RDSfile list containing 1. list subject IDs (first element) 2. surface data matrix object (second element), data matrix object. matrix N subjects x M vertices dimensions can used readily VertexWiseR statistical analysis functions. row corresponds subject (order listed folder) contains left right hemispheres' vertex-wise values.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/SURFvextract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SURFvextract — SURFvextract","text":"Note RStudio inherit shell environment variables open terminal. case, fshomepath argument needs provided. function runs system shell commands produce set subjects directory: 1) sorted list subjects \"sublist.txt\"; 2) link file selected surface fsaverage template. 3) left right hemisphere .mgh maps outputted 'FreeSurfer' 's mris_preproc.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/SURFvextract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SURFvextract — SURFvextract","text":"","code":"SURFvextract(sdirpath = \"freesurfer_subjdir\",  filename=paste0(tempdir(), \"/CTv.rds\"), template=\"fsaverage5\", measure=\"curv\")  #> No FREESURFER_HOME variable has been set in the system environment or it could not be retrieved by R. If the latter is true, try specifying the path to FreeSurfer with the fshomepath argument. SURFvextract() will not be able to work without FreeSurfer."},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Surface to atlas — surf_to_atlas","title":"Surface to atlas — surf_to_atlas","text":"Returns mean sum vertex-wise surface data ROI selected atlas","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surface to atlas — surf_to_atlas","text":"","code":"surf_to_atlas(surf_data, atlas, mode = \"mean\")"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surface to atlas — surf_to_atlas","text":"surf_data N x V matrix object containing surface data (N row subject, V vertex), fsaverage5 (20484 vertices), fsaverage6 (81924 vertices), fslr32k (64984 vertices) hippocampal (14524 vertices) space. See also Hipvextract(), SURFvextract() FSLRvextract output formats. atlas numeric integer object corresponding atlas interest.  1=Desikan, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400. Set 1 default. argument ignored hippocampal surfaces. mode string indicating whether extract sum ('sum') average ('mean') ROI vertices values. Default 'mean'.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Surface to atlas — surf_to_atlas","text":"matrix object ROI column corresponding average vertex-wise values row","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Surface to atlas — surf_to_atlas","text":"function currently works aparc/Desikan-Killiany-70, Destrieux-148, Glasser-360, Schaefer-100, Schaefer-200, Schaefer-400 atlases. ROI vertex mapping data obtained 'ENIGMA toolbox' ; data Destrieux came  'Nilearn' 's nilearn.datasets.fetch_atlas_surf_destrieux hippocampal data, function currently works \"bigbrain\" 10-parcels atlas integrated 'HippUnfold.' See also doi:10.1016/j.neuroimage.2019.116328 .","code":""},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surface to atlas — surf_to_atlas","text":"","code":"CTv = runif(20484,min=0, max=100) parcel_data = surf_to_atlas(CTv, 1)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_vol.html","id":null,"dir":"Reference","previous_headings":"","what":"Surface to volume — surf_to_vol","title":"Surface to volume — surf_to_vol","text":"Converts surface data volumetric data (.nii file)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_vol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surface to volume — surf_to_vol","text":"","code":"surf_to_vol(surf_data, filename, VWR_check = TRUE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_vol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surface to volume — surf_to_vol","text":"surf_data numeric vector object containing surface data, either fsaverage5 (1 x 20484 vertices) fsLR32k (1 x 64984 vertices) space. can one row vertices (cohort surface data matrix). filename string object containing desired name output .nii file (default 'output.nii' R temporary directory (tempdir())). VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_vol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Surface to volume — surf_to_vol","text":".nii volume file","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/surf_to_vol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surface to volume — surf_to_vol","text":"","code":"CTv = runif(20484,min=0, max=100); surf_to_vol(CTv, filename = paste0(tempdir(),'/volume.nii'), VWR_check=FALSE) #> Non-interactive sessions need requirement checks"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Thresholding TFCE output — TFCE_threshold","title":"Thresholding TFCE output — TFCE_threshold","text":"Threshold TFCE maps TFCE_vertex_analysis() output identifies significant clusters desired threshold.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thresholding TFCE output — TFCE_threshold","text":"","code":"TFCE_threshold(TFCEoutput, p = 0.05, atlas = 1, k = 20, VWR_check = TRUE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thresholding TFCE output — TFCE_threshold","text":"TFCEoutput object containing output TFCE_vertex_analysis() p numeric object specifying p-value threshold results (Default 0.05) atlas numeric integer object corresponding atlas interest.  1=Desikan, 2=Destrieux-148, 3=Glasser-360, 4=Schaefer-100, 5=Schaefer-200, 6=Schaefer-400. Set 1 default. argument ignored hippocampal surfaces. k Cluster-forming threshold (Default 20) VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thresholding TFCE output — TFCE_threshold","text":"list object containing cluster level results, unthresholded t-stat map, thresholded t-stat map, positive, negative bidirectional cluster maps.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thresholding TFCE output — TFCE_threshold","text":"","code":"model1_TFCE=readRDS(file = url(paste0(\"https://github.com/CogBrainHealthLab\", \"/VertexWiseR/blob/main/inst/demo_data/model1_TFCE.rds?raw=TRUE\")))  TFCEanalysis_output=TFCE_threshold(model1_TFCE, p=0.05, atlas=1, VWR_check=FALSE) #> Non-interactive sessions need requirement checks TFCEanalysis_output$cluster_level_results #> NULL"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex-wise analysis with threshold-free cluster enhancement (fixed effect) — TFCE_vertex_analysis","title":"Vertex-wise analysis with threshold-free cluster enhancement (fixed effect) — TFCE_vertex_analysis","text":"Fits linear model cortical hippocampal surface data predicted outcome, returns t-stat threshold-free cluster enhancement (TFCE) statistical maps selected contrast.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex-wise analysis with threshold-free cluster enhancement (fixed effect) — TFCE_vertex_analysis","text":"","code":"TFCE_vertex_analysis(   model,   contrast,   formula,   formula_dataset,   surf_data,   nperm = 100,   tail = 2,   nthread = 10,   smooth_FWHM,   VWR_check = TRUE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex-wise analysis with threshold-free cluster enhancement (fixed effect) — TFCE_vertex_analysis","text":"model N X P data.frame object containing N rows subject P columns predictor included model contrast N x 1 numeric vector object containing values predictor interest. length equal number subjects model (can single column model). t-stat TFCE maps estimated predictor. formula optional string formula object describing predictors fitted surface data, replacing model, contrast, random arguments. argument used, formula_dataset argument must also provided. dependent variable needed, always surface data values. first independent variable formula always interpreted contrast interest estimate cluster-thresholded t-stat maps. one random regressor can given must indicated '(1|variable_name)'. formula_dataset optional data.frame object containing independent variables used formula (IV names formula must match column names dataset). surf_data N x V matrix object containing surface data (N row subject, V vertex), fsaverage5 (20484 vertices), fsaverage6 (81924 vertices), fslr32k (64984 vertices) hippocampal (14524 vertices) space. See also Hipvextract(), SURFvextract() FSLRvextract output formats. Alternatively, string object containing path surface object (.rds file) outputted extraction functions may given. nperm numeric integer object specifying number permutations generated subsequent thresholding procedures (default = 100) tail numeric integer object specifying whether test one-sided positive (1), one-sided negative (-1) two-sided (2) hypothesis nthread numeric integer object specifying number CPU threads allocate smooth_FWHM numeric vector object specifying desired smoothing width mm. specified surf_data smoothed previously smooth_surf(), result surf_data smoothed twice. VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertex-wise analysis with threshold-free cluster enhancement (fixed effect) — TFCE_vertex_analysis","text":"list object containing t-stat TFCE statistical maps can subsequently thresholded using TFCE_threshold()","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertex-wise analysis with threshold-free cluster enhancement (fixed effect) — TFCE_vertex_analysis","text":"TFCE method adapted  'Nilearn' Python library.","code":""},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertex-wise analysis with threshold-free cluster enhancement (fixed effect) — TFCE_vertex_analysis","text":"","code":"demodata = readRDS(system.file('demo_data/SPRENG_behdata_site1.rds', package = 'VertexWiseR'))[1:5,] CTv = readRDS(file = url(paste0(\"https://github.com\", \"/CogBrainHealthLab/VertexWiseR/blob/main/inst/demo_data/\", \"SPRENG_CTv_site1.rds?raw=TRUE\")))[1:5,]  TFCEpos=TFCE_vertex_analysis(model=demodata[,c(\"sex\",\"age\")],  contrast=demodata[,\"age\"], surf_data=CTv, tail=1,  nperm=5, nthread = 2, VWR_check=FALSE) #> Non-interactive sessions need requirement checks  #To threshold the results, you may then run: #results=TFCE_threshold(TFCEpos, p=0.05, atlas=1) #results$cluster_level_results  #Formula alternative: #formula= as.formula(\"~ age + sex\") #TFCEpos=TFCE_vertex_analysis(formula=formula,  #formula_dataset=demodata, surf_data=CTv, tail=1,  #nperm=5, nthread = 2, VWR_check=FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis_mixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex-wise analysis with threshold-free cluster enhancement (mixed effect) — TFCE_vertex_analysis_mixed","title":"Vertex-wise analysis with threshold-free cluster enhancement (mixed effect) — TFCE_vertex_analysis_mixed","text":"Fits linear mixed effects model cortical hippocampal surface data predicted outcome, returns t-stat threshold-free cluster enhancement (TFCE) statistical maps selected contrast.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis_mixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex-wise analysis with threshold-free cluster enhancement (mixed effect) — TFCE_vertex_analysis_mixed","text":"","code":"TFCE_vertex_analysis_mixed(   model,   contrast,   random,   formula,   formula_dataset,   surf_data,   nperm = 100,   tail = 2,   nthread = 10,   smooth_FWHM,   perm_type = \"row\",   VWR_check = TRUE )"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis_mixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex-wise analysis with threshold-free cluster enhancement (mixed effect) — TFCE_vertex_analysis_mixed","text":"model N X P data.frame object containing N rows subject P columns predictor included model.data.frame include random effects variable. contrast N x 1 numeric vector object containing values predictor interest. length equal number subjects model (can single column model). t-stat TFCE maps estimated predictor. random N x 1 numeric vector object containing values random variable (optional). length equal number subjects model (inside model data.frame). formula optional string formula object describing predictors fitted surface data, replacing model, contrast, random arguments. argument used, formula_dataset argument must also provided. dependent variable needed, always surface data values. first independent variable formula always interpreted contrast interest estimate cluster-thresholded t-stat maps. one random regressor can given must indicated '(1|variable_name)'. formula_dataset optional data.frame object containing independent variables used formula (IV names formula must match column names dataset). surf_data N x V matrix object containing surface data (N row subject, V vertex), fsaverage5 (20484 vertices), fsaverage6 (81924 vertices), fslr32k (64984 vertices) hippocampal (14524 vertices) space. See also Hipvextract(), SURFvextract() FSLRvextract output formats. Alternatively, string object containing path surface object (.rds file) outputted extraction functions may given. nperm numeric integer object specifying number permutations generated subsequent thresholding procedures (default = 100) tail numeric integer object specifying whether test one-sided positive (1), one-sided negative (-1) two-sided (2) hypothesis nthread numeric integer object specifying number CPU threads allocate smooth_FWHM numeric vector object specifying desired smoothing width mm. specified surf_data smoothed previously smooth_surf(), result surf_data smoothed twice. perm_type string object specifying whether permute rows (\"row\"), subjects (\"\"), within subjects (\"within\") within subjects (\"within_between\") random subject effects. Default \"row\". VWR_check boolean object specifying whether check validate system requirements. Default TRUE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis_mixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertex-wise analysis with threshold-free cluster enhancement (mixed effect) — TFCE_vertex_analysis_mixed","text":"list object containing t-stat TFCE statistical maps can subsequently thresholded using TFCE_threshold()","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis_mixed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertex-wise analysis with threshold-free cluster enhancement (mixed effect) — TFCE_vertex_analysis_mixed","text":"TFCE method adapted 'Nilearn' Python library.","code":""},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/TFCE_vertex_analysis_mixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertex-wise analysis with threshold-free cluster enhancement (mixed effect) — TFCE_vertex_analysis_mixed","text":"","code":"demodata = readRDS(system.file('demo_data/SPRENG_behdata_site1.rds', package = 'VertexWiseR'))[1:5,] CTv = readRDS(file = url(paste0(\"https://github.com\", \"/CogBrainHealthLab/VertexWiseR/blob/main/inst/demo_data/\", \"SPRENG_CTv_site1.rds?raw=TRUE\")))[1:5,]  TFCEpos=TFCE_vertex_analysis_mixed(model=demodata[,c(\"sex\", \"age\")], contrast=demodata[,\"age\"], random=demodata[,\"id\"],  surf_data=CTv, nperm =5,tail = 1, nthread = 2, VWR_check=FALSE) #> Non-interactive sessions need requirement checks  #To get significant clusters, you may then run: #results=TFCE_threshold(TFCEpos, p=0.05, atlas=1) #results$cluster_level_results  #Formula alternative: #formula= as.formula(\"~ age + sex + (1|id)\") #TFCEpos=TFCE_vertex_analysis_mixed(formula=formula,  #formula_dataset=demodata, surf_data=CTv, tail=1,  #nperm=5, nthread = 2, VWR_check=FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/VWRfirstrun.html","id":null,"dir":"Reference","previous_headings":"","what":"VertexWiseR system requirements installation — VWRfirstrun","title":"VertexWiseR system requirements installation — VWRfirstrun","text":"Helps user verify VertexWisrR's system requirements present install (suitable 'Python' 'Miniconda' environment, 'BrainStat' toolbox libraries). installed already, nothing overwritten.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/VWRfirstrun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VertexWiseR system requirements installation — VWRfirstrun","text":"","code":"VWRfirstrun(requirement = \"any\", n_vert = 0, promptless = FALSE)"},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/VWRfirstrun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VertexWiseR system requirements installation — VWRfirstrun","text":"requirement String specifies requirement enquire : Python/Conda installation: 'python/conda ' Python/Conda Brainstat installation: 'conda/brainstat' specific 'BrainStat' libraries: 'fsaverage5', 'fsaverage6', 'fslr32k', 'yeo_parcels' neurosynth database: 'neurosynth'. Default '' checks everything. n_vert Numeric vector indicating number vertices given surface data required templates asked . modify requirement argument accordingly. promptless boolean object specifying whether prompt user action system requirements missing. TRUE, VWRfirstrun() simply inform missing prompt action. Default FALSE.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/VWRfirstrun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VertexWiseR system requirements installation — VWRfirstrun","text":"returned value interactive session. non-interactive sessions, string object informing system requirements missing.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/VWRfirstrun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"VertexWiseR system requirements installation — VWRfirstrun","text":"VertexWiseR imports makes use R package 'reticulate.' 'reticulate' package allows R borrow translate Python functions R. Using 'reticulate', package calls functions 'BrainStat' Python module. 'reticulate' work properly VertexWiseR, Python environment needs installed — default choice offered VWRfirstrun let reticulate (version 1.41.0) create ephemeral Python virtual environment using UV py_require(). reason desirable, VWRfirstrun() also gives choice install 'Miniconda' (lightweight version Python) Python environment reticulate default path specified path. Vertex-wise statistical analyses cortical surface require fsaverage parcellation templates imported default 'BrainStat'. decode_surf_data() function also requires 'Neurosynth' database downloaded.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/reference/VWRfirstrun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"VertexWiseR system requirements installation — VWRfirstrun","text":"","code":"VWRfirstrun()"},{"path":[]},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"VertexWiseR v1.4.0","text":"New function getting_started(): allows users run package’s tutorials download demo data . Article vignettes now propose downloading demo data bulk rather running line every time. New function plot_overlay_surf(): allows users plot two surfaces top , varying opacity, color maps value ranges (cortical surfaces). new tutorial/vignette called ‘Overlaying plots transparent thresholding’ also created showcase . New function DTSERIESvextract(): allows users extract vertex-wise surface-based CIFTI dense time-series data individual dtseries .nii file HCP, fMRIprep XCP-D preprocessed directories. New options plot_surf: alpha setting reduce transparency non-NaN vertices, option plot NaN vertices.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"FIXES","title":"VertexWiseR v1.4.0","text":"VWRfirstrun() set promptless, checked wrong directory path brainstat’s fslr32k data considered missing. Successful check message stopped showing except promptless set FALSE, mistake. Fix ensure right numpy version gets installed installing miniconda, case brainstat upon installation Fix still run UV RETICULATE_PYTHON set NA (suggestion given article users whose systems already python installed want dedicate VWR virtual environment)","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"vertexwiser-v132","dir":"Changelog","previous_headings":"","what":"VertexWiseR v1.3.2","title":"VertexWiseR v1.3.2","text":"CRAN release: 2025-06-11","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"fixes-1-3-2","dir":"Changelog","previous_headings":"","what":"FIXES","title":"VertexWiseR v1.3.2","text":"Function argument: FSLRvextract()’s argument “dscaler” changed “dscalar”","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"vertexwiser-v131","dir":"Changelog","previous_headings":"","what":"VertexWiseR v1.3.1","title":"VertexWiseR v1.3.1","text":"CRAN release: 2025-04-14","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"new-features-1-3-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"VertexWiseR v1.3.1","text":"Slight modification cluster building process, speeds TFCE analyses. plot_surf() now includes transparent_bg argument uses boolean make plot’s background transparent (default FALSE, white background). fslr32k can now used surf_to_vol() decode_surf_data() BrainStat’s Yeo parcellation data longer required VWRfirstrun(). fetched default BrainStat’s SLM script, VertexWiseR used hippocampal surfaces. Slightly clearer message VWRfirstrun()’s check BrainStat data path: actual user’s home path printed instead “$HOME_DIR/”.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"fixes-1-3-1","dir":"Changelog","previous_headings":"","what":"FIXES","title":"VertexWiseR v1.3.1","text":"Documentation mistake: surf_to_vol() work fsaverage6.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"vertexwiser-v130","dir":"Changelog","previous_headings":"","what":"VertexWiseR v1.3.0","title":"VertexWiseR v1.3.0","text":"CRAN release: 2025-03-18","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"VertexWiseR v1.3.0","text":"TFCE computation now optimized speed: previously, parallel steps permutation loop building linear model every time; now model saved file temporary directory (tempdir(), automatically cleaned ), loaded within loops instead rebuilt.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"FIXES","title":"VertexWiseR v1.3.0","text":"TFCE_vertex_analysis_mixed(): random variable processed identically BrainStat across permuted unpermuted models, setting factorizing variable one case. Now random variables factorized . error affected coefficients t-stat estimations, extension results Example 2, longer shows negative clusters now displays smaller positive cluster TFCE. makes outcome consistent RFT results (TFCE conservative instead opposite). apologise overlooking inconsistency code. Please refer Example 2 presented vignette/website page --date accurate results.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"vertexwiser-v121","dir":"Changelog","previous_headings":"","what":"VertexWiseR v1.2.1","title":"VertexWiseR v1.2.1","text":"CRAN release: 2025-03-10","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"new-features-1-2-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"VertexWiseR v1.2.1","text":"Reticulate’s last update allows users install ephemeral Python environments UV instead requiring stable Python/Miniconda installation. users create py_require() running VertexWiseR, environment selected automatically. Python environment found, VertexWiseR now gives choice either install ephemeral environment UV, install Miniconda Python via classic ways.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"fixes-1-2-1","dir":"Changelog","previous_headings":"","what":"FIXES","title":"VertexWiseR v1.2.1","text":"SURFvextract() now gives proper error message subjects’ surface measure files found. also get rid sublist.txt outputted automatically subj_ID set FALSE. Fix messages silenced mistake Miniconda’s installations process. Fix script using pip/pip3 install properly vtk (9.3.1) choosing classic Python installation.","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"vertexwiser-v120","dir":"Changelog","previous_headings":"","what":"VertexWiseR v1.2.0","title":"VertexWiseR v1.2.0","text":"CRAN release: 2024-12-12","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"VertexWiseR v1.2.0","text":"Update RFT_vertex_analysis: now outputs also unthresholded tstat map; Rdoc fixed accordingly (setting p=1 previously advised caused errors, doesn’t simply output unthresholded tstat map) SURFvextract() now optional argument fshomepath. ensures FreeSurfer’s environment accessed R set function used RStudio FREESURFER_HOME variable defined running Rstudio. needed RStudio inherit system variables set opening terminal. surf_data argument (modelling smoothing functions) list object subject list along surface matrix (outputted extraction functions subj_ID=TRUE), code automatically detects matrix list, named “surf_obj”, instead forcing users specify matrix. Modelling functions now accept string path .rds file outputted extraction functions, instead matrix surf_data argument New function CAT12vextract() allows surface data resampled 32k meshes CAT12 extracted converted surface .rds object. works measure applicable 32k resampled meshes (‘thickness’, ‘depth’, ‘fractaldimension’, ‘gyrification’, ‘toroGI20mm’). New vignette/article gives advice solve various Python-related issues Numpy’s version check longer present pip replaces upon BrainStat’s installation compatible version","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"FIXES","title":"VertexWiseR v1.2.0","text":"Python package ‘vtk’ causes issues latest 9.4.0 versions. correct 9.3.1 version now installed installing Miniconda reticulate’s Python environment via VWRfirstrun(). cmap argument plot_surf() now converted class color class default Surface extracters fix: Working directory restored saving RDS instead exit HIPvextract() FSLRvextract(). ensures filename interpreted relative sdirpath (subjects directory). Fixed parameter skipping VWR_check smooth_surf() TFCE_threshold() nested avoid VWR_check’s repetition. caused issues non-interactive sessions/nesting situations. Now, instead: TFCE_threshold(), users calling may manually set argument VWR_check=FALSE want skipped. smooth_surf(), now VWR_check skipped parent function identified “model_check” mean smooth function run function already VWR_check (RFT_vertex_analysis, TFCE_vertex_analysis TFCE_vertex_analysis_mixed functions). Fix non-miniconda Python installation: numpy, vtk brainstat installed via system(’‘) optional use pip pip3 work properly Windows due bash syntax error. pip3 installation now triggered error occurs first system(’pip …’) call. Furthermore, reticulate’s environment loaded immediately Python installation make sure pip function can used subsequently install required packages. minor improvements messages printed VWRfirstrun() installation process. VWRfirstrun(): One message still showing even promptless=TRUE, now fixed FSLRvextract(): Default filename fixed (simply ‘fslr32k.rds’) avoid instability, reticulate Miniconda installation now set v.24.9.2 instead latest","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"vertexwiser-v110","dir":"Changelog","previous_headings":"","what":"VertexWiseR v1.1.0","title":"VertexWiseR v1.1.0","text":"CRAN release: 2024-10-10","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"VertexWiseR v1.1.0","text":"New plotsurf_3d() function: allows surface data plotted 3D viewer via plotly interface extraction tutorial now also gives FreeSurfer preprocessed data demonstration plot_surf() now accepts atlas ROI values atlases supported atlas_to_surf() atlas_to_surf() now works hippocampal surface data smooth_surf() allows enter path surface .rds object instead inputting object ","code":""},{"path":"https://cogbrainhealthlab.github.io/VertexWiseR/news/index.html","id":"fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"FIXES","title":"VertexWiseR v1.1.0","text":"miniconda/python libraries installations via VWRfirstrun(), pip3 added alternative used pip install fails Fixed Surface extraction tutorial (download.file wrong url/method, untar added alternative unzip possible failures demo surface data) Fixes MacOS (better custom path management, SURFvextract() compatibility issue fixed)","code":""}]
